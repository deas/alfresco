<project name="continuous" default="continuous"
    xmlns:jacoco="antlib:org.jacoco.ant">

   <!-- ********************************** -->
   <!-- ** Initialisation/Configuration ** -->
   <!-- ********************************** -->

   <!-- Allow the path of the imported script to be overriden -->
   <property name="build.script" value="build.xml" />
   <import file="${basedir}/${build.script}" />

   <!-- We ant Java 1.6 and Ant 1.7, to make the scripting simple -->
   <fail message="Ant 1.7 or higher is required to build. ${ant.version} detected">
     <!-- antversion tag not available in 1.6 which is unhelpful -->
     <condition><contains string="${ant.version}" substring="1.6." /></condition>
   </fail>
   <fail message="Ant 1.7 or higher is required to build. ${ant.version} detected">
     <condition><not><antversion atleast="1.7" /></not></condition>
   </fail>

   <target name="continuous-init" depends="init">
      <property file="continuous.properties" />
      <property name="classpath.unit.test.full" value="${toString:classpath.unit.test.extension}" />
      <path id="classpath.unit.test.extension">
         <pathelement location="${dir.name.binaries}/build-classpath/${version.major}.${version.minor}" />
         <pathelement path="${classpath.unit.test.full}" />
      </path>
      <echo>classpath.unit.test.extension = ${toString:classpath.unit.test.extension}</echo>
   </target>

   <target name="init-test" 
           depends="continuous-init">
      <mkdir dir="${dir.continuous.dist}" />
   </target>


   <!-- ********************** -->
   <!-- ** Cleaning targets ** -->
   <!-- ********************** -->

   <target name="clean-continuous"
           description="Cleans just the continuous build area" 
           depends="continuous-init">
      <delete quiet="yes" 
              includeEmptyDirs="true" 
              dir="${dir.continuous.build}" />
   </target>

   <!-- *********************** -->
   <!-- ** Top level targets ** -->
   <!-- *********************** -->

   <target name="continuous" 
           description="Performs a full clean, runs all tests and creates all distribution files"
           depends="clean-continuous, 
                    clean, 
                    -reset-database,
                    set-build-number,
                    init-test,
                    test,
                    distribute,
                    generate-checksums" />

   <target name="continuous-core" 
           description="Performs a full clean, runs all tests and creates all patch distribution files"
           depends="clean-continuous, 
                    clean, 
                    -reset-database,
                    set-build-number,
                    init-test,
                    test,
                    distribute-core,
                    generate-checksums" />

   <target name="continuous-without-tests" 
           description="Performs a full clean and creates all distribution files but does not run any tests"
           depends="clean-continuous, 
                    clean, 
                    -reset-database, 
                    distribute,
                    generate-checksums" />

   <target name="continuous-without-distribute" 
           description="Performs a full clean and runs all tests but does not generate any distribution files"
           depends="clean-continuous, 
                    clean, 
                    -reset-database,
                    set-build-number,
                    init-test,
                    test" />

   <target name="distribute" 
           description="Creates the distribution files for all platforms"
           depends="set-build-number,
                    incremental, 
                    distribute-core,
                    distribute-non-core" />

   <target name="distribute-patch" 
           description="Creates the distribution files for all platforms"
           depends="set-build-number,
                    incremental, 
                    distribute-core" />

   <target name="distribute-non-core" 
           description="Creates the distribution files for all platforms"
           depends="distribute-amps,
                    distribute-installers,
                    distribute-extras" />

   <target name="distribute-core" 
           description="Creates the patch distribution files for all platforms"
           depends="assemble-commands,
                    distribute-amps,
                    assemble-tomcat,
                    distribute-war,
                    distribute-webeditor,
                    distribute-wcmqs-extension,
                    distribute-solr,
                    distribute-file-transfer-receiver" />

   <target name="set-build-number"
           depends="continuous-init, set-revision-number">
      <property file="distribute.properties" />
   </target>

   <target name="generate-checksums"
           description="Generates checksum files for the distibution files" 
           depends="continuous-init">
      <delete>
         <fileset dir="${dir.continuous.dist}" 
                  includes="*.MD5"/>
      </delete>
      <checksum format="MD5SUM">
         <fileset dir="${dir.continuous.dist}"/>
      </checksum>
   </target>

   <!-- **************************************************** -->
   <!-- ** Database targets (for internal script use only)** -->
   <!-- **************************************************** -->
 
  <target name="reset-database" 
          depends="-drop-database, 
                   -create-database" />
   <target name="-reset-database" 
           depends="-drop-database, 
                    -create-database" />

   <target name="load-database-properties"
           depends="continuous-init">
      <!-- If a DB properties override file was supplied, copy it into place -->
      <script language="javascript" classpath="${classpath.bsf_javascript}"> <![CDATA[
         importClass(java.io.File);
         var testResourcesPath = project.getProperty("dir.project.repository.test.resources");
         var globalFile = new File(testResourcesPath + "/alfresco/module/test/alfresco-global.properties" );

         var propfile = project.getProperty("DB_PROPERTIES");

         // Always clean up the old one
         var del = project.createTask("delete");
         del.setFile( globalFile );
         del.perform();

         if(propfile != null) {
            // Copy in the new one
            var copy = project.createTask("copy");
            copy.setFile( new File(propfile) );
            copy.setTofile( globalFile );
            copy.perform();
         }
      ]]></script>

      <!-- Grab dev-context.xml and test-context.xml, from the repo config + home dir -->
      <!-- Then, load the repository properties files, in order -->
      <!-- Note - ant property loading works differently to spring, so we -->
      <!--  need to load in the reverse order! -->
      <script language="javascript" classpath="${classpath.bsf_javascript}"> <![CDATA[
         importClass(java.util.regex.Matcher);
         importClass(java.util.regex.Pattern);
         importClass(java.io.File);
         importClass(java.io.FileInputStream);
         importClass(java.io.InputStreamReader);
         importClass(java.io.BufferedReader);
         importClass(java.lang.System);

         var fail = project.createTask("fail");
         var loadfile = project.createTask("loadfile");
         loadfile.setFailonerror(false);

         var repoConfigPath = project.getProperty("dir.project.repository.config");

         var repoPropMatcher = Pattern.compile("<bean id=\"repository-properties\"(.*?)</bean>", Pattern.DOTALL);
         var locationsMatcher = Pattern.compile("<property name=\"locations\"(.*?)</property>", Pattern.DOTALL);
         var valueMatcher = Pattern.compile("<value>(.*?)</value>", Pattern.DOTALL);

         var propertiesDefs = new Array();
         var propertiesFiles = new Array();
         var count = 0;

         for each (var dirp in ["user.home", "dir.project.repository.config", "dir.project.repository.test.resources"]) {
            var dir = project.getProperty(dirp) + "/alfresco/extension/";
            for each (var xmlc in ["dev-context","test-context"]) {
               var xmlfile = new File(dir + xmlc + ".xml");
               count++;

               loadfile.setProperty("xml"+count);
               loadfile.setSrcFile(xmlfile);
               loadfile.perform();
 
               var xml = project.getProperty("xml"+count);
               if(xml != null) {
                  var rpm = repoPropMatcher.matcher(xml);
                  if(rpm.find()) {
                      var lm = locationsMatcher.matcher( rpm.group() );
                      if(lm.find()) {
                         var vm = valueMatcher.matcher( lm.group(0) );
                         while(vm.find()) {
                            var property = vm.group(1);
                            var pfn;

                            // Support things like <value>${foo}</value>
                            if(property.startsWith("${")) {
                               var sysProp = property.substring(2, property.length()-1);
                               property = project.getProperty(sysProp);
                               if(property == null) {
                                  fail.setMessage("Can't resolve " + vm.group(0));
                                  fail.perform();
                               }
                            }

                            // Get the FS path to the property file
                            if(property.startsWith("classpath:")) {
                               pfn = repoConfigPath + "/" + property.substring(10);
                            } else if(property.startsWith("file:")) {
                               pfn = property.substring(5);
                            } else {
                               pfn = property;
                            }
   
                            if(pfn != null) {
                               var pf = new File(pfn);
                               if(pf.exists()) {
                                  propertiesDefs.push( property );
                                  propertiesFiles.push( pf );
                               }
                            }
                         }
                      }
                  }
               }
            }
         }

         // If they gave a properties override file, that goes first
         var propfile = project.getProperty("DB_PROPERTIES");
         if(propfile != null) {
            propertiesFiles.push( new File(propfile) );
            propertiesDefs.push( propfile );
         }

         // Now load the files, in reverse order
         for(var i=(propertiesFiles.length-1); i>=0; i--) {
            var pf = propertiesFiles[i];
            var property = propertiesDefs[i];

            var echoT = project.createTask("echo");
            echoT.setMessage("Loading DB property " + property);
            echoT.perform();

            var propertyT = project.createTask("property");
            propertyT.setFile(pf);
            propertyT.perform();
         } 

         // Try to figure out what database engine they wanted
         var dbtype = "unknown";
         var dburl = project.getProperty("db.url");
         if(dburl == null) {
            fail.setMessage("No {db.url} property found, which is required");
            fail.perform();
         } else if(dburl.startsWith("jdbc:mysql://")) {
            dbtype = "mysql";

            // Master URL has no database name
            var masterURL = "jdbc:mysql://";
            if(dburl.indexOf(":///") == -1) {
               // Copy the hostname over for the master URL
               var tmp = dburl.substring(dburl.indexOf("://")+3);
               masterURL += tmp.substring(0, tmp.indexOf("/"));
            }
            masterURL += "/";
            project.setProperty("db.master.url", masterURL);
         } else if(dburl.startsWith("jdbc:postgresql:")) {
            dbtype = "postgresql";

            // Master URL is to the special template1 database
            var masterURL = "jdbc:postgresql:";
            if(dburl.indexOf("://") != -1) {
               // Copy the hostname over for the master URL
               var tmp = dburl.substring(dburl.indexOf("://")+1);
               masterURL += tmp.substring(0, tmp.indexOf("/",3)+1);
            }
            masterURL += "template1";
            project.setProperty("db.master.url", masterURL);
         } else if(dburl.startsWith("jdbc:oracle:")) {
            dbtype = "oracle";

            // Ensure we were given sys credentials too
            if(project.getProperty("db.master.username") == null) {
               fail.setMessage("Property db.master.username not given (normally 'sys as sysdba')");
               fail.perform();
            }
            if(project.getProperty("db.master.password") == null) {
               fail.setMessage("Property db.master.password not given");
               fail.perform();
            }
         } else if(dburl.startsWith("jdbc:db2//")) {
            dbtype = "db2"; // DB2 type 4

            // We need the JDBC connection URL for the default database
            var slashslash = dburl.indexOf("db2//");
            var dbnameslash = dburl.indexOf("/", slashslash+6);
            var masterURL = dburl.substring(0, dbnameslash) + "/default";
            project.setProperty("db.master.url", masterURL);
         } else if(dburl.startsWith("jdbc:db2:")) {
            dbtype = "db2"; // DB2 type 2
            project.setProperty("db.master.url", "jdbc:db2:default");
         } else if(dburl.startsWith("jdbc:sqlserver://")) {
            dbtype = "mssql";
            // We need the JDBC connection URL for the master database
            var masterURL = dburl.substring(0, dburl.indexOf(";databaseName=")) +
               ";databaseName=master";
            project.setProperty("db.master.url", masterURL);
         } else if(dburl.startsWith("jdbc:jtds:sqlserver://")) {
            dbtype = "mssql";

            // We need the JDBC connection URL for the master database
            var slashslash = dburl.indexOf("://");
            var dbnameslash = dburl.indexOf("/", slashslash+4);
            var masterURL = dburl.substring(0, dbnameslash) + "/master";
            project.setProperty("db.master.url", masterURL);
         }

         project.setProperty("db.type",dbtype);
      ]]></script>
      <echo message="DB Type is ${db.type}"/>
      <echo message="DB Name is ${db.name}"/>
      <echo message="DB Normal URL is ${db.url}"/>
      <echo message="DB Master URL is ${db.master.url}"/>
   </target>

   <target name="-create-database" 
           depends="continuous-init, load-database-properties">
       <antcall target="-create-database-${db.type}" />
   </target>
   <target name="-create-database-unknown">
      <fail message="Unknown database type for JDBC url '${db.url}'" />
   </target>
   <target name="-create-database-mysql">
      <sql driver="${db.driver}" 
           url="${db.master.url}"
           classpathref="classpath.compile" 
           print="yes"
           userid="${db.username}" 
           password="${db.password}">
         create database if not exists ${db.name};
      </sql>
   </target>
   <target name="-create-database-postgresql">
      <!-- Note - PostGreSQL lacks a "if not exists" for creating databases -->
      <!-- So, do it with ignoring of errors -->
      <sql driver="${db.driver}" 
           url="${db.master.url}"
           classpathref="classpath.compile" 
           print="yes"
           autocommit="yes"
           onerror="continue"
           userid="${db.username}" 
           password="${db.password}">
         create database ${db.name};
      </sql>
   </target>
   <target name="-create-database-mssql">
      <!-- MS SQL Server lacks a "if not exists" for creating databases -->
      <!-- So, do it with ignoring of errors -->
      <sql driver="${db.driver}" 
           url="${db.master.url}"
           classpathref="classpath.compile" 
           print="yes"
           autocommit="yes"
           onerror="continue"
           userid="${db.username}" 
           password="${db.password}">
         CREATE DATABASE ${db.name};
         ALTER DATABASE ${db.name} SET ALLOW_SNAPSHOT_ISOLATION ON;
      </sql>
   </target>
   <target name="-create-database-oracle">
      <!-- Really user + schema, rather than oracle database -->
      <sql driver="${db.driver}" 
           url="${db.url}"
           classpathref="classpath.compile" 
           print="yes"
           userid="${db.master.username}" 
           password="${db.master.password}">
         grant connect,resource to ${db.username} identified by ${db.password};
      </sql>
   </target>
   <target name="-create-database-db2">
       <!-- DB name must be <= 8 chars -->
       <!-- Windows Only solution: Use db2 cmdline since no ability to create database via JDBC (not even using procedure call to "admin_cmd") :-( -->
       <!-- increase logfilsz for certain unit tests that run large txns (see ALF-4241) -->
       <exec executable="db2cmd">
         <arg value="/w"/>
         <arg value="db2 create database ${db.name} using codeset UTF-8 territory default pagesize 32 K&amp;&amp;db2 update database configuration for ${db.name} using logfilsiz 8192&amp;&amp;exit"/>
       </exec>
   </target>

   <target name="-drop-database" 
           depends="continuous-init, load-database-properties">
       <antcall target="-drop-database-${db.type}" />

      <delete verbose="true">
         <fileset dir="${basedir}" 
                  includes="**/alfresco.log" />
      </delete>
      
      <!-- don't delete repository.properties in case this is being run in local devenv -->
      <delete dir="${dir.root}" 
              includeEmptyDirs="true"
              excludes="repository.properties" />
   </target>
   
   <target name="-drop-database-unknown">
      <fail message="Unknown database type for JDBC url '${db.url}'" />
   </target>
   <target name="-drop-database-mysql" depends="init">
      <sql driver="${db.driver}" 
           url="${db.master.url}"
           classpathref="classpath.compile" 
           print="yes"
           userid="${db.username}" 
           password="${db.password}">
         drop database if exists ${db.name};
      </sql>
   </target>
   <target name="-drop-database-postgresql" depends="init">
      <sql driver="${db.driver}" 
           url="${db.master.url}"
           classpathref="classpath.compile" 
           print="yes"
           autocommit="yes"
           userid="${db.username}" 
           password="${db.password}">
         drop database if exists ${db.name};
      </sql>
   </target>
   <target name="-drop-database-mssql" depends="init">
      <!-- MS SQL Server lacks a "if exists" for dropping databases -->
      <!-- So, do it with ignoring errors -->
      <sql driver="${db.driver}" 
           url="${db.master.url}"
           classpathref="classpath.compile" 
           print="yes"
           autocommit="yes"
           onerror="continue"
           userid="${db.username}" 
           password="${db.password}">
         drop database ${db.name};
      </sql>
   </target>
   <target name="-drop-database-oracle" depends="init">
      <!-- Really user + schema, rather than oracle database -->
      <!-- Oracle lacks a "if exists" for dropping users -->
      <!-- So, do it with ignoring of errors -->
      <sql driver="${db.driver}" 
           url="${db.url}"
           classpathref="classpath.compile" 
           print="yes"
           autocommit="yes"
           onerror="continue"
           userid="${db.master.username}" 
           password="${db.master.password}">
         drop user ${db.username} cascade;
      </sql>
   </target>
   <target name="-drop-database-db2" depends="init">
       <!-- Use db2 cmdline since no ability to drop database via JDBC (not even using procedure call to "admin_cmd") ??? -->
       <exec executable="db2cmd">
         <arg value="/c"/>
         <arg value="db2 drop database ${db.name}"/>
       </exec>
   </target>

   <target name="assemble-commands"
           depends="package-mmt, assemble-commands-init, assemble-command-extras"/>

   <target name="assemble-commands-init">
           
      <mkdir dir="${dir.continuous.assemble.commands}" />
      <copy todir="${dir.continuous.assemble.commands}">
         <fileset dir="${dir.project.jlan}/jni" />
      </copy>
      <copy todir="${dir.continuous.assemble.commands}">
         <fileset dir="${dir.installer.bitrock}/bitrock/alfresco/commands" />
      </copy>
      
   </target>
   
	                    
   <target name="assemble-tomcat"
           depends="continuous-init, set-build-number">
      <mkdir dir="${dir.continuous.dist}" />

      <!-- copy project files common to both platforms -->
      <copy todir="${dir.continuous.assemble.tomcat}/webapps">
         <fileset dir="${dir.project.webclient.dist}" 
                  includes="${file.name.war.webclient}" />
         <fileset dir="${dir.project.slingshot.dist}"
                  includes="${file.name.war.slingshot}" />
      </copy>

      <!-- Copy any required common libs -->
      <copy todir="${dir.continuous.assemble.tomcat}/lib"
            file="${dir.project.3rdparty.lib}/devenv/${file.name.jar.postgres.connector}" />
      <copy todir="${dir.continuous.assemble.tomcat}/endorsed" 
            file="${dir.project.3rdparty.lib}/${dir.name.xalan}/${file.name.jar.xalan}" />
      <copy todir="${dir.continuous.assemble.tomcat}/endorsed" 
            file="${dir.project.3rdparty.lib}/${dir.name.xalan}/${file.name.jar.serializer}" />

      <!-- Add config to shared location -->
      <copy todir="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/extension">
         <fileset dir="${dir.project.repository.config}/alfresco/extension" />
         <fileset dir="${dir.project.webclient.config}/alfresco/extension" />
         <fileset dir="${dir.project.datamodel.config}/alfresco/extension" />
      </copy>
      <copy todir="${dir.continuous.assemble.tomcat}/shared/classes"
         file="${dir.project.repository.config}/alfresco-global.properties.sample" />
      <copy todir="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/web-extension">
         <fileset dir="${dir.installer.bitrock}/bitrock/alfresco/shared/web-extension" />
         <fileset file="${dir.project.slingshot.config}/alfresco/web-extension/custom-slingshot-application-context.xml.sample" />
         <filterset begintoken="@@" endtoken="@@">
             <filter token="BITROCK_TOMCAT_PORT" value="8080"/>
         </filterset>
      </copy>
      <copy todir="${dir.continuous.assemble.tomcat}/shared/classes/alfresco/messages">
         <fileset dir="${dir.project.installer.messages}" />
      </copy>

      <antcall target="assemble-tomcat-extras"/>            
   </target>

   <!-- *********************** -->
   <!-- ** Installer targets ** -->
   <!-- *********************** -->

   <!-- Try and pick appropriate exe - assumes mac=OSX and unix=Linux -->
   <target name="set-bitrock-builder">
      <condition property="platformExe" value="${file.name.bitrock.exe.win}">
      	 <os family="windows" />
      </condition>
      <condition property="platformExe" value="${file.name.bitrock.exe.osx}">
      	 <os family="mac" />
      </condition>
      <condition property="platformExe" value="${file.name.bitrock.exe.linux}">
      	 <os family="unix" />
      </condition>
      <property name="file.name.bitrock.license.xml" location="${dir.name.binaries}/build-classpath/license.xml"/>

      <echo message="Using binaries_folder=${dir.name.binaries}, file.name.bitrock.license.xml=${file.name.bitrock.license.xml}"/>

   </target>
   
    <!-- BitRock installer targets:
         PLEASE NOTE: It is not possible to use these targets as an argument to ant as they will fail due to missing
                      properties. They must be called via the "distribute-installers" target to ensure dependencies are
                      configured. This is a limitation caused by allowing the targets to be called in parallel avoiding
                      multiple dependency invocation (see ant docs for more information). Instead use the targets with
                      the same name but prefixed by "build-"
    -->
    <target name="windows-32-bit-installer">
        <exec dir="${dir.installer.bitrock}" executable="${platformExe}" output="${dir.continuous.build}/error-install-win.txt" failonerror="true">
            <arg line='${installer.build.type} project.xml windows ${installer.package.type} --license ${file.name.bitrock.license.xml} --setvars "project.outputDirectory=${dir.continuous.build}" ${installer.build.args}  "project.fullName=Alfresco ${file.name.codeline} (Evaluation Use Only)" "project.installerFilename=${file.name.dist.installer.win}" "binaries_folder=${installer.build.binaries.win32}" alfresco_googledocs_source_file="${googledocs.repo.amp}" alfresco_googledocs_share_source_file="${googledocs.share.amp}"'/>
        </exec>
        <exec dir="${dir.installer.bitrock}" executable="${file.name.signcode.exe.linux}" output="${dir.continuous.build}/error-signcode-win.txt" failonerror="true">
            <arg line='-spc "${file.name.signcode.spc}" -key "${file.name.signcode.key}" -n "Alfresco" -i "http://www.alfresco.com/" -in "${dir.continuous.build}/${file.name.dist.installer.win}" -out "${dir.continuous.dist}/${file.name.dist.installer.win}" -t "${url.signcode.timestamp}"'/>
        </exec>
    </target>
    
    <target name="windows-64-bit-installer">
        <exec dir="${dir.installer.bitrock}" executable="${platformExe}" output="${dir.continuous.build}/error-install-win64.txt" failonerror="true">
            <arg line='${installer.build.type} project.xml windows ${installer.package.type} --license ${file.name.bitrock.license.xml} --setvars "project.outputDirectory=${dir.continuous.build}" ${installer.build.args}  "project.installerFilename=${file.name.dist.installer.win64}" "binaries_folder=${installer.build.binaries.win64}" alfresco_googledocs_source_file="${googledocs.repo.amp}" alfresco_googledocs_share_source_file="${googledocs.share.amp}"'/>
        </exec>
        <exec dir="${dir.installer.bitrock}" executable="${file.name.signcode.exe.linux}" output="${dir.continuous.build}/error-signcode-win64.txt" failonerror="true">
            <arg line='-spc "${file.name.signcode.spc}" -key "${file.name.signcode.key}" -n "Alfresco" -i "http://www.alfresco.com/" -in "${dir.continuous.build}/${file.name.dist.installer.win64}" -out "${dir.continuous.dist}/${file.name.dist.installer.win64}" -t "${url.signcode.timestamp}"'/>
        </exec>
    </target>

    <target name="osx-64-bit-installer">
        <exec dir="${dir.installer.bitrock}" executable="${platformExe}" output="${dir.continuous.build}/error-install-osx64.txt" failonerror="false">
            <arg line='${installer.build.type} project.xml osx ${installer.package.type} --license ${file.name.bitrock.license.xml} --setvars "project.outputDirectory=${dir.continuous.dist}" ${installer.build.args} "project.fullName=Alfresco ${file.name.codeline} (Evaluation Use Only)" project.installerFilename="${file.name.dist.installer.osx64}" binaries_folder="${installer.build.binaries.osx64}" alfresco_googledocs_source_file="${googledocs.repo.amp}" alfresco_googledocs_share_source_file="${googledocs.share.amp}"'/>
        </exec>
        <tar destfile="${dir.continuous.dist}/${file.name.dist.installer.osx64}.tar.gz"
             longfile="gnu"
             compression="gzip">
            <tarfileset dir="${dir.continuous.dist}/${file.name.dist.installer.osx64}"
                        prefix="${file.name.dist.installer.osx64}" mode="755"/>
        </tar>
    </target>

    <target name="linux-64-bit-installer">
        <exec dir="${dir.installer.bitrock}" executable="${platformExe}" output="${dir.continuous.build}/error-install-linux64.txt" failonerror="true">
            <arg line='${installer.build.type} project.xml linux-x64 ${installer.package.type} --license ${file.name.bitrock.license.xml} --setvars "project.outputDirectory=${dir.continuous.dist}" ${installer.build.args} project.installerFilename="${file.name.dist.installer.linux64}" binaries_folder="${installer.build.binaries.lin64}" alfresco_googledocs_source_file="${googledocs.repo.amp}" alfresco_googledocs_share_source_file="${googledocs.share.amp}"'/>
        </exec>      
    </target>

    <!-- Targets for building BitRock installer for specific platforms -->
    <target name="build-windows-32-bit-installer"
            depends="continuous-init, set-build-number, set-bitrock-builder">   
        <antcall target="windows-32-bit-installer"/>            
    </target>
    <target name="build-windows-64-bit-installer"
            depends="continuous-init, set-build-number, set-bitrock-builder">  
        <antcall target="windows-64-bit-installer"/>            
    </target>
    <target name="build-osx-64-bit-installer"
            depends="continuous-init, set-build-number, set-bitrock-builder"> 
        <antcall target="osx-64-bit-installer"/>            
    </target>
    <target name="build-linux-64-bit-installer"
            depends="continuous-init, set-build-number, set-bitrock-builder">   
        <antcall target="linux-64-bit-installer"/>            
    </target>
            
   <!-- Build installers -->
   <target name="distribute-installers" unless="skip.installers"
           depends="continuous-init, set-build-number, set-bitrock-builder" >
            <antcall target="windows-32-bit-installer"/>
            <antcall target="windows-64-bit-installer"/>
            <antcall target="osx-64-bit-installer"/>
            <antcall target="linux-64-bit-installer"/>
   </target>

   
   <!-- ***************** -->
   <!-- ** WAR targets ** -->
   <!-- ***************** -->

   <target name="distribute-war"
           description="Creates the WAR file distribution for all platforms"
           depends="continuous-init" >
      <mkdir dir="${dir.continuous.dist}" />

      <tar destfile="${dir.continuous.assemble}/temp.tar" 
           longfile="gnu">
         <tarfileset dir="${dir.installer.bitrock}"
                     includes="licenses/**" />
         <tarfileset dir="${dir.installer.bitrock}"
                     includes="README.txt" />
         <tarfileset dir="${dir.continuous.assemble.tomcat}"
                     prefix="web-server" />
         <tarfileset dir="${dir.project.installer}/war-commands"
                     prefix="bin" 
                     mode="755"/>
         <!-- Only DLLs and JARs from assemble area -->
         <tarfileset dir="${dir.continuous.assemble.commands}"
                     prefix="bin" 
                     includes="**/*.dll,**/*.jar"/>
      </tar>
	  <zip destfile="${dir.continuous.dist}/${file.name.dist.war}.zip">
        <tarfileset src="${dir.continuous.assemble}/temp.tar"/>
      </zip>
      <delete quiet="yes" file="${dir.continuous.assemble}/temp.tar" />

   </target>

   <target name="distribute-solr"
           description="Creates the ZIP file of the sample SOLR installation"
           depends="set-build-number, deploy-solr">
      <mkdir dir="${dir.continuous.dist}" />

      <zip destfile="${dir.continuous.dist}/${file.name.dist.solr}.zip">
         <zipfileset dir="${dir.project.solr.instance}" />
         <zipfileset prefix="alf_data/keystore" dir="${dir.project.repository.config}/alfresco/keystore" />
      </zip>

   </target>


   <!-- ************************ -->
   <!-- ** Quick Start Bundle ** -->
   <!-- ************************ -->

   <target name="distribute-wcmqs-extension">

      <tar destfile="${dir.continuous.assemble}/temp.tar" 
           longfile="gnu">
         <tarfileset dir="${dir.module.wcmquickstart.dist}" includes="${file.name.amp.wcmquickstart}" />
         <tarfileset dir="${dir.module.wcmquickstart-share.dist}" includes="${file.name.amp.wcmquickstart-share}" />
         <tarfileset dir="${dir.module.wcmquickstart.dist}" includes="${file.name.amp.wcmquickstart}" />
         <tarfileset dir="${dir.project.webeditor.dist}" includes="${file.name.war.webeditor}" />
         <tarfileset dir="${dir.module.wcmquickstart}" includes="README_wcmqs.txt" />
         <tarfileset dir="${dir.project.wcmquickstart-webapp.config}/alfresco/web-extension" includes="**/*" />
        <tarfileset dir="${dir.continuous.assemble}" includes="${file.name.war.webeditor}, ${file.name.war.wcmquickstart-webapp}" />
      </tar>
	  <zip destfile="${dir.continuous.dist}/${file.name.dist.wcmqs}.zip">
        <tarfileset src="${dir.continuous.assemble}/temp.tar"/>
      </zip>
      <delete quiet="yes" file="${dir.continuous.assemble}/temp.tar" />

   </target>

   <!-- ************************************ -->
   <!-- ** Module Management Tool targets ** -->
   <!-- ************************************ -->
   
   <target name="assemble-mmt" 
           depends="continuous-init">

      <!-- Create the required directory structure -->
      <mkdir dir="${dir.continuous.dist}" />
      <mkdir dir="${dir.continuous.assemble.mmt}" />

      <!-- extract the one-jar file -->
      <unjar src="${dir.project.3rdparty.lib}/one-jar/one-jar-boot-0.96-RC4.jar"
             dest="${dir.continuous.assemble.mmt}" 
             overwrite="true" />
      <!-- remove unwanted files -->
      <delete >
         <fileset dir="${dir.continuous.assemble.mmt}">
            <include name="**/*.java" />
            <include name="**/boot-manifest.mf" />
         </fileset>
      </delete>

      <!-- copy required jars into lib folder -->
      <copy todir="${dir.continuous.assemble.mmt}/lib" 
            flatten="false">
         <fileset dir="${dir.project.3rdparty.lib}" 
                  includes="**/jug-asl-2.0.0.jar" />
         <fileset dir="${dir.project.3rdparty.lib}/mmt-dependencies" 
                  includes="*.jar" excludes="*-sources.jar"/>
      </copy>
      
      <!-- unjar the spring surf core JAR -->
      <unjar dest="${dir.continuous.assemble.mmt}/tmp-spring-surf" overwrite="true">
         <fileset dir="${dir.project.3rdparty.lib}/spring-surf" includes="spring-surf-core-*.jar" />
      </unjar>

      <!-- get the files for the main mmt jar -->
      <copy todir="${dir.continuous.assemble.mmt}/tmp-mmt-jar" 
            flatten="false">
         
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/error/AlfrescoRuntimeException.class" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/util/Pair.class" />
         <fileset dir="${dir.project.core.classes}" 
                  includes="org/alfresco/util/VersionNumber.class" />
         <fileset dir="${dir.continuous.assemble.mmt}/tmp-spring-surf" 
                  includes="org/springframework/extensions/surf/util/I18NUtil.class" />
         <fileset dir="${dir.continuous.assemble.mmt}/tmp-spring-surf" 
                  includes="org/springframework/extensions/surf/util/ISO8601DateFormat.class" />
         <fileset dir="${dir.continuous.assemble.mmt}/tmp-spring-surf" 
                           includes="org/springframework/extensions/surf/exception/PlatformRuntimeException.class" />
         <fileset dir="${dir.project.repository.config}" 
                  includes="org/alfresco/repo/module/tool/default-file-mapping.properties" />
         <fileset dir="${dir.project.repository.classes}" 
                  includes="org/alfresco/repo/module/**/*.class" />
         <fileset dir="${dir.project.repository.classes}"
                  includes="org/alfresco/service/cmr/module/**/*.class" />
      </copy>
      <!-- copy in a manifest file -->
      <copy tofile="${dir.continuous.assemble.mmt}/tmp-mmt-jar/META-INF/MANIFEST.MF" >
         <fileset dir="${dir.project.repository}/source/META-INF" 
                  includes="mmt-manifest.mf" />
      </copy>
      <!-- jar the main mmt classes -->
      <mkdir dir="${dir.continuous.assemble.mmt}/main" />
      <jar destfile="${dir.continuous.assemble.mmt}/main/main.jar" 
           manifest="${dir.continuous.assemble.mmt}/tmp-mmt-jar/META-INF/MANIFEST.MF" 
           update="false" >
         <fileset dir="${dir.continuous.assemble.mmt}/tmp-mmt-jar">
            <include name="**/*" />
         </fileset>
      </jar>
      <!-- Remove temp files -->
      <delete dir="${dir.continuous.assemble.mmt}/tmp-mmt-jar" />
      <delete dir="${dir.continuous.assemble.mmt}/tmp-spring-surf" />
   </target>
   
   <target name="package-mmt" 
           depends="assemble-mmt"
           description="Creates the Alfresco Module Management Tool distribution file for all platforms">
      <mkdir dir="${dir.continuous.assemble.commands}" />

      <zip destfile="${dir.continuous.assemble.commands}/${file.name.dist.mmt}.jar">
         <zipfileset dir="${dir.continuous.assemble.mmt}" />
      </zip>
   </target>

   <!-- *************************** -->
   <!-- ** Test Coverage targets ** -->
   <!-- *************************** -->

    <target name="coverage-report" depends="continuous-init">
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
            <classpath path="${dir.project.3rdparty.lib}/${dir.name.devenv}/${file.name.jar.jacoco}"/>
        </taskdef>

        <!-- Generate the JaCoCo report for coverage -->
        <mkdir dir="${dir.continuous.dist}/jacoco/report" />
        <jacoco:report>
            <executiondata>
                <fileset dir="${basedir}" includes="*projects/*/build/jacoco.exec" />
            </executiondata>
            <structure name="Test Coverage ${version.number} ${DSTAMP}-${TSTAMP}">
                <classfiles>
                    <fileset dir="${basedir}" includes="*projects/*/build/dist/*.jar"
                        excludes="projects/web-editor-plugin/build/dist/alfresco-webeditor-plugin-*.jar"/>
                </classfiles>
                <sourcefiles encoding="${javac.encoding}">
                </sourcefiles>
            </structure>
            <html destdir="${dir.continuous.dist}/jacoco/report"/>
        </jacoco:report>

        <!-- Zip the coverage files, for convenience -->
        <zip destfile="${dir.continuous.dist}/jacoco/coveragefiles.zip">
            <fileset dir="${basedir}" includes="*projects/*/build/jacoco.exec" />
        </zip>
    </target>

   <!-- *********************** -->
   <!-- ** Webeditor targets ** -->
   <!-- *********************** -->
   
   <target name="distribute-webeditor" depends="set-build-number, continuous-init, package-all-webeditor"
           description="Distributes the Web Editor files">
      <mkdir dir="${dir.continuous.dist}" />
      <zip destfile="${dir.continuous.dist}/${file.name.dist.webeditor}.zip">
         <zipfileset dir="${dir.project.webeditor.dist}" 
                     includes="${file.name.jar.webeditor.taglib}, ${file.name.war.webeditor}" />
         <zipfileset dir="${dir.project.webeditorplugin.dist}" 
                     includes="${file.name.jar.webeditor.plugin}" />
         <zipfileset dir="${dir.project.webframeworkcommons.dist}"
                     includes="${file.name.jar.formsclient}" />
         <zipfileset dir="${dir.project.webeditorsamples.customersite.dist}"
                     includes="${file.name.war.webeditor.sample.customersite}" />
         <zipfileset dir="${dir.project.3rdparty.lib}/spring-surf"
                     includes="spring-webeditor-*.jar" />
         <zipfileset file="${file.jar.webeditor.yui}" />
      </zip>
      <copy todir="${dir.continuous.assemble}" file="${dir.project.webeditor.dist}/${file.name.war.webeditor}" />
   </target>

   <!-- ************************************ -->
   <!-- ** File Transfer Receiver targets ** -->
   <!-- ************************************ -->
   
   <target name="distribute-file-transfer-receiver" depends="set-build-number, continuous-init, incremental-file-transfer-receiver"
           description="Distributes the File Transfer Receiver (FTR) files">
      <mkdir dir="${dir.continuous.dist}" />
      <copy tofile="${dir.continuous.dist}/${file.name.dist.file-transfer-receiver}.zip" 
         file="${dir.project.file-transfer-receiver.dist}/${file.name.zip.file-transfer-receiver}" />
   </target>

</project>

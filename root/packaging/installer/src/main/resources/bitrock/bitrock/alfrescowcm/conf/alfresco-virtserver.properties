#------------------------------------------------------------
# Properties specific to local Alfresco virtualization server
# See also:  alfresco-virtserver-context.xml (advanced users)
#------------------------------------------------------------

# The virtualization server domain name
#
#     The domain name given here is used to form the URL that the
#     virtualization server creates at startup time as a part of
#     its registration with the (possibly remote) Alfresco webapp.
#
#     NOTE:   You MUST change this value if either
#             of the following conditions are true:
#
#             o  You wish to browse virtualized web content
#                from a different machine than the one that
#                the virtualization server itself runs on.
#
#             o  You wish to run the virtualization server on
#                a different machine than the one hosting the
#                Alfresco webapp.
#
#
#    Overview
#    --------
#
#    The Alfresco webapp assumes:    ${alfresco.virtserver.domain}
#    and all of its subdomains:    *.${alfresco.virtserver.domain}
#    are mapped via DNS to the IP address of your virtualization server.
#
#    As a free and public Internet-based service, Alfresco has
#    created a special nameserver that associates the domain name:
#    127-0-0-1.ip.alfrescodemo.net and all its subdomains with the
#    IP address 127.0.0.1 (i.e.:  localhost).
#
#    Thus if you're running the virtualization server on the same machine
#    that hosts the Alfresco webapp, *AND* if you only want to run your
#    browser on this same machine, the default setting will work for you:
#
#        alfresco.virtserver.domain=127-0-0-1.ip.alfrescodemo.net
#
#    If don't change this default, the URLs created for viewing
#    virtualized web content will take the form:
#
#      http://<...>.127-0-0-1.ip.alfrescodemo.net:<port>/....
#
#    However, suppose you want to do either of the following:
#
#        o  View virtualized content from a browser running on a
#          *different* IP address than the virtualization server
#
#        o  Run the virtualization server on a host with a
#          *different* IP address than the Alfresco webapp
#
#    If either of these conditions apply, you can still use the
#    wildcard domain service provided by Alfresco, but you'll
#    need to adjust the hyphen-encoded IP address that precedes
#    ".ip.alfrescodemo.net" so that it encodes the actual IP
#    address of the machine that hosts your virtualization sever.
#
#    For example, if run your virtualization server on a
#    machine with an IP address of 192.168.1.5, you could
#    set your alfresco.virtserver.domain property like this:
#
#      alfresco.virtserver.domain=192-168-1-5.ip.alfrescodemo.net
#
#    ,--------------------------------------------------------------.
#    |                                                              |
#    |                  Advanded Configuration                      |
#    |                  ----------------------                      |
#    |                                                              |
#    |  There are some cases where you might not want to use        |
#    |  the wildcard domain service provided by Alfresco:           |
#    |                                                              |
#    |     o  You may need to run disconnected from the             |
#    |        Internet entirely (e.g.: a demo machine).             |
#    |                                                              |
#    |     o  You might have internal policies against relying      |
#    |        on any network-based service is not under the         |
#    |        direct control of someone in your organization.       |
#    |                                                              |
#    |   In this case, you can set up your own nameserver           |
#    |   (such as BIND).  Do do this, just associate the hostname   |
#    |   that your virtualization server is running on              |
#    |   (or preferably, some CNAME alias of it), with a            |
#    |   wildcard DNS record pointing at the same IP address.       |
#    |                                                              |
#    |   Thus, the IP address of:   ${alfresco.virtserver.domain}   |
#    |   and its subdomains:      *.${alfresco.virtserver.domain}   |
#    |   and your virtualization server's name (or CNAME)           |
#    |   must all provide the same answer via the nameserver        |
#    |   your clients are using.                                    |
#    |                                                              |
#    |   For example, suppose that:                                 |
#    |                                                              |
#    |       o  Your virtualization server is running on a          |
#    |          machine whose IP address is 192.168.1.5.            |
#    |                                                              |
#    |       o  For non-Alfresco applications, 192.168.1.5          |
#    |          is typically referred to by the name "mybox".       |
#    |                                                              |
#    |       o  We'd like to use the alias "avm" for "mybox"        |
#    |          in the context of viewing virtualized content.      |
#    |                                                              |
#    |       o  The default domain within the LAN that your         |
#    |          users will be browsing on is "localdomain.lan".     |
#    |                                                              |
#    |   If you were using BIND (aka: "named"), the zone file       |
#    |   for  "localdomain.lan" could include resource records      |
#    |   that look something like this:                             |
#    |                                                              |
#    |       mybox                   IN   A        192.168.1.5      |
#    |       avm                     IN   CNAME    mybox            |
#    |       *.avm.localdomain.lan.  IN   CNAME    mybox            |
#    |                                                              |
#    |   Notice that both the "avm" hostname and all its            |
#    |   subdomains are just CNAMES (aliases) for "mybox"           |
#    |   (on 192.168.1.5).                                          |
#    |                                                              |
#    |   With a configuration like this, you could set the          |
#    |   alfresco.virtserver.domain property as follows:            |
#    |                                                              |
#    |      alfresco.virtserver.domain=avm.localdomain.lan          |
#    |                                                              |
#    |   The Alfresco GUI would then automatically construct        |
#    |   URLs for viewing web content that look like this:          |
#    |   http://<...>.avm.localdomain.lan:8180/some/path/...        |
#    |                                                              |
#    |   All machines that use your nameserver would then be        |
#    |   able to see the virtualized web content.                   |
#    |                                                              |
#    `--------------------------------------------------------------'
#
#    If the "ADVANCED" configuration seems like too much work,
#    (or if you lack expertise in setting up a name server), just
#    use the: <hyphen-encoded-IP-address>.ip.alfrescodemo.net
#    method (as described above).
#
#    Alfresco's free/public wildcard domain service ("EchoDNS")
#    returns resource records with a TTL of 1 day.   Therefore,
#    the run-time overhead is quite minimal.  Once your machine
#    has done a name lookup, it will cache the result for the
#    next 24 hours (or until you reboot).
#
alfresco.virtserver.domain=127-0-0-1.ip.alfrescodemo.net


# Cache-Control parameters
#
#     The virtualization server limits how long a browser may cache
#     items received from different virtual hosts by injecting
#     "Cache-Control: max-age=..." HTTP headers in its responses.
#
#     The actual value used for max-age depends upon what the name
#     of the virtual host is.  By default, low values are used for
#     "preview" hosts, and longer values are used for "staging".
#     You can tune these settings here.
#
#     Background
#     -----------
#     For generic browsing on the Internet, a user might choose to
#     configure  their browser to cache data for a very long time.
#     It's a personal preference:  the longer an item is permitted
#     to be cached, the better the browser's performance is likely
#     to be.  However, it also becomes more likely that "stale"
#     versions of files will be viewed.
#
#     When browsing content on the virtualization server,
#     the trade-offs are not only different from "generic"
#     Internet browsing, they're also different for each major
#     category of virtual host (i.e.:  "staging", "preview", etc.).
#
#     Consider this:
#
#        o  The probability of viewing "stale" cached data is
#           the probability that file XYZ changes multiplied by
#           the probability you happen to look at XYZ
#           within  some alloted time interval.
#
#        o  Content in a virtual host devoted to "preview"
#           operations is almost certain to be viewed within a
#           few seconds of being created/modified.  However,
#           you do want a little bit of caching to handle
#           multiple repeated images within a single page
#           in an efficient manner.
#
#        o  Content in a virtual host devoted to "staging" may be
#           changing, but the likelihood of viewing any given page
#           is fairly low.  Staleness in "staging" is also better
#           tolerated because the user probably isn't working on
#           these files, and hence won't know/care if they're
#           a bit out of date.  Thus, the performance/freshness
#           trade-off is different.
#
#     If the user does encounter  "stale"  data, they can always hit
#     their browser's "refresh" button.   The goal of these settings is
#     to help them avoid having having to explicit refresh *most* the time.
#
#     If an administrator errs to much on the side of short max-age
#     values, performance will suffer.  Browser caches are particularly
#     important on slow links.
#
#     If an administrator errs to much on the side of lengthy max-age
#     Cache-Control settings, users might end up turning off their
#     browser's cache entirely.  This would hurt performance even more.
#     Again, it's a trade-off.
#
#
#     Time is given in seconds:
#
alfresco.virtserver.cache-control.max-age.preview=4
alfresco.virtserver.cache-control.max-age.workarea=1800
alfresco.virtserver.cache-control.max-age.staging=1800
alfresco.virtserver.cache-control.max-age.default=1800


# Virtualization server HTTP port
#
#     The port specified here *MUST* match the port value
#     specified within $VIRTUAL_TOMCAT_HOME/conf/server.xml.
#     For example, the default value of 8180 is specified
#     within $VIRTUAL_TOMCAT_HOME/conf/server.xml in a
#     XML Connector tag that looks like this:
#
#        <!-- Define a non-SSL HTTP/1.1 Connector -->
#        <Connector port="8180" maxHttpHeaderSize="8192"
#                   maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
#                   enableLookups="false" redirectPort="8543" acceptCount="100"
#                   connectionTimeout="20000" disableUploadTimeout="true" />
#
#     If the value you provide below does not match the
#     value specified in your server.xml, the Alfresco
#     webapp will not be able to direct browsers to your
#     virtualization server.  Typically, there's no need
#     to change this value and its  associated value in
#     server.xml (unless you have a port conflict).
#
alfresco.virtserver.http.port=8180


# Virtualization server JMX RMI port
#
#     The port value given here is used to form the URL
#     that the virtualization server creates at startup
#     time as a part of its registration with the
#     (possibly remote) Alfresco webapp. Typically,
#     there's no need to change this value (unless
#     you have a port conflict).
#
alfresco.virtserver.jmxrmi.port=50510


# Virtualization server connection retry interval
#
#     The virtualization server is able to recover from transient
#     outages caused by restarting the Alfresco webapp, interruptions
#     of network connectivity, etc.  The retry interval specified
#     determines how long the virtualization server should wait
#     before attempting the operation again.  This slow poll will
#     continue indefinitely, or until either the connection succeeds,
#     or the virtualization server itself is shut down.
#     Time is specified here in milliseconds.
#
alfresco.virtserver.connection.retry.interval=5000



# Virtualization server CIFS file system mount point
#
#     The virtualization server can expose the remote
#     Alfresco AVM repository as a CIFS file system.
#     The properties below specify where (and whether)
#     this automatic mount takes place on Windows
#     and on UNIX-based systems (e.g.: Linux, Mac).
#
#     Exposing a file system interface makes integration
#     simple between the Alfresco repository and normal tools
#     such as the Windows File Explorer, UNIX-based shells,
#     link checkers, and so on.  It also allows JSPs that
#     invoke getRealPath() to work properly.
#
#     On Windows, the ".unix" properties are ignored.
#     On Linux,   the ".win"  properties are ignored.
#
alfresco.virtserver.cifs.avm.versiontree.win=v
alfresco.virtserver.cifs.avm.versiontree.unix=/media/alfresco/cifs/v
 
# NOTE: The CIFS automount feature has not been implemented.
#       Therefore, the configuration options below are only
#       placeholders, and currently have no effect.  
#
#       Once CIFS automount is implemented, you'll be able to
#       enable/disable it here (by default it will be enabled).
#
alfresco.virtserver.cifs.avm.versiontree.win.automount=true
alfresco.virtserver.cifs.avm.versiontree.unix.automount=true


# Admin level user and password to connect to login to Alfresco server.
#
alfresco.server.user=admin
alfresco.server.password=@@BITROCK_ALFRESCO_PLAIN_ADMIN_PASSWORD@@



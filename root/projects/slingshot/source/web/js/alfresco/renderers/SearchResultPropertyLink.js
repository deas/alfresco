/**
 * Copyright (C) 2005-2014 Alfresco Software Limited.
 *
 * This file is part of Alfresco
 *
 * Alfresco is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Alfresco is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Extends the Property renderer ({@link module:alfresco/renderers/Property}) to provide a linked property.
 * 
 * @module alfresco/renderers/SearchResultPropertyLink
 * @extends alfresco/renderers/PropertyLink
 * @mixes alfresco/navigation/_HtmlAnchorMixin
 * @author Dave Draper
 */
define(["dojo/_base/declare",
        "alfresco/renderers/PropertyLink",
        "alfresco/navigation/_HtmlAnchorMixin",
        "dojo/_base/lang"], 
        function(declare, PropertyLink, _HtmlAnchorMixin, lang) {

   return declare([PropertyLink, _HtmlAnchorMixin], {

      /**
       *
       * @instance
       */
      postCreate: function alfresco_renderers_SearchResultPropertyLink__postCreate() {
         this.inherited(arguments);
         this.publishPayload = this.generatePayload();
         this.makeAnchor(this.publishPayload.url, this.publishPayload.type);
      },

      /**
       * Returns an array containing the selector that identifies the span to wrap in an anchor.
       * This overrides the [mixed in function]{@link module:alfresco/navigation/_HtmlAnchorMixin}
       * that just returns an empty array.
       *
       * @instance
       */
      getAnchorTargetSelectors: function alfresco_renderers_SearchResultPropertyLink__getAnchorTargetSelectors() {
         return ["span.inner"];
      },

      /**
       * Overrides the [inherited function]{@link module:alfresco/renderers/PropertyLink#getPublishTopic}
       * to return the "ALF_NAVIGATE_TO_PAGE" topic.
       * 
       * @instance
       * @return {object} The generated payload
       */
      getPublishTopic: function alfresco_renderers_SearchResultPropertyLink__getPublishTopic() {
         return "ALF_NAVIGATE_TO_PAGE";
      },

      /**
       * Overrides the [inherited function]{@link module:alfresco/renderers/PropertyLink#getPublishPayload}
       * to return the payload generated by the [generatePayload function]
       * {@link module:alfresco/renderers/SearchResultPropertyLink#generatePayload}.
       * 
       * @instance
       * @return {object} The generated payload
       */
      getPublishPayload: function alfresco_renderers_PropertyLink__getPublishTopic() {
         return this.publishPayload;
      },

      /**
       * This function generates a payload for the [NavigationService]{@link module:alfresco/services/NavigationService}
       * that varies depending upon the type of search result (e.g. a document or folder, in a site or in
       * the repository, etc) which can also be used to extrapolate an HTML anchor via the mixed in
       * [_HtmlAnchorMixin]{@link module:alfresco/navigation/_HtmlAnchorMixin}.
       *
       * @instance
       * @return {object} The generated payload
       */
      generatePayload: function alfresco_renderers_SearchResultPropertyLink__generatePayload() {
         var payload = {
            type: "SHARE_PAGE_RELATIVE",
            target: "CURRENT",
            url: null
         };
         var type = lang.getObject("type", false, this.currentItem),
             site = lang.getObject("site.shortName", false, this.currentItem);

         if (type == "folder")
         {
            var path = lang.getObject("path", false, this.currentItem),
                name = lang.getObject("name", false, this.currentItem);

            if (site != null)
            {
               payload.url = "site/" + site + "/documentlibrary?path=" + path + "/" + name;
            }
            else
            {
               payload.url = "repository?path=" + path + "/" + name;
            }
         }
         else
         {
            var nodeRef = lang.getObject("nodeRef", false, this.currentItem);
            if (site != null)
            {
               payload.url = "site/" + site + "/document-details?nodeRef=" + nodeRef;
            }
            else
            {
               payload.url = "document-details?nodeRef=" + nodeRef;
            }
         }
         return payload;
      }
   });
});
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mongo="http://www.springframework.org/schema/data/mongo"
    xsi:schemaLocation="http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/data/mongo
          http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    
    <!--                                     -->      
    <!-- Import webdrone application context -->      
    <!--                                     -->      
    <bean id="webDroneTestProperties" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:test.properties</value>
                <value>classpath:webdrone.properties</value>
                <value>classpath:webdrone.hybrid.properties</value>
            </list>
        </property>
    </bean>

    <bean id="browserConfig" class="java.util.HashMap"/>
    <!--                  -->
    <!-- WebDrone Factory -->
    <!--                  -->
    <bean id="webDroneFactoryBean" class="org.alfresco.webdrone.WebDroneFactory">
        <constructor-arg name="alfrescoVersion" value="${webdrone.alfresco.version}" />
        <constructor-arg name="defaultWaitTime" value="${webdrone.element.wait.time}" />
        <constructor-arg name="browser" value="${webdrone.browser}" />
        <constructor-arg name="maxPageRenderWaitTime" value="${webdrone.page.render.wait.time}" />
        <property name="gridUrl" value="${webdrone.grid.url}" />
        <property name="chromeServerPath" value="${webdrone.chrome.server.path}" />
        <property name="ieServerPath" value="${webdrone.ie.server.path}" />
        <property name="downloadDirectory" value="${webdrone.download.directory}" />
        <property name="mimeTypes" value="${webdrone.download.mime.types}" />
        <property name="popupRendertime" value="${webdrone.error.popup.render.time}" />
        <property name="elementWaitInSeconds" value="${webdrone.element.action.wait.seconds}" />
        <property name="preferences" ref="browserConfig" />
    </bean>
    
    <!--                  -->
    <!-- WebDrone         -->
    <!--                  -->    
    <bean id="webDrone" factory-bean="&amp;webDroneFactoryBean" factory-method="getObject" scope="prototype" destroy-method="quit" />
    <bean id="customDrone" factory-bean="&amp;webDroneFactoryBean" factory-method="getDroneWithCustomProfile" scope="prototype" destroy-method="quit" />

    <bean id="shareTestProperties" class="org.alfresco.webdrone.util.ShareTestProperty">
        <constructor-arg name="shareUrl" value="${webdrone.target}" />
        <constructor-arg name="gridUrl"  value="${webdrone.grid.url}" />
        <constructor-arg name="username" value="${test.username}" />
        <constructor-arg name="password" value="${test.password}" />
        <constructor-arg name="googleUserName" value="${googleUserName}" />
        <constructor-arg name="googlePassword" value="${googlePassword}" />
        <constructor-arg name="alfrescoVersion" value="${webdrone.alfresco.version}" />
        <constructor-arg name="downloadDirectory" value="${webdrone.download.directory}" />
        <constructor-arg name="hybridEnabled" value="${hybrid.enabled}" />
        <property name="cloudUserName" value="${cloud.username}" />
        <property name="cloudUserPassword" value="${cloud.password}" />
        <property name="popupRendertime" value="${webdrone.page.render.wait.time}" />
    </bean>

    <!-- Initiating another user that will be required for unit tests.  -->
    <bean id="anotherUser" class="org.alfresco.webdrone.share.site.document.UserProfile">
        <property name="fName" value="${test.user1.fName}" />
        <property name="lName"  value="${test.user1.lName}" />
        <property name="username" value="${test.user1.username}" />
        <property name="password" value="${test.user1.password}" />
        <property name="emailId" value="${test.user1.emailId}" />
    </bean>

    <bean id="hybridWebDroneFactoryBean" class="org.alfresco.webdrone.WebDroneFactory" lazy-init="true">
        <constructor-arg name="alfrescoVersion" value="${webdrone.hybrid.alfresco.version}" />
        <constructor-arg name="defaultWaitTime" value="${webdrone.hybrid.element.wait.time}" />
        <constructor-arg name="browser" value="${webdrone.hybrid.browser}" />
        <constructor-arg name="maxPageRenderWaitTime" value="${webdrone.hybrid.page.render.wait.time}" />
        <property name="gridUrl" value="${webdrone.grid.url}" />
        <property name="chromeServerPath" value="${webdrone.chrome.server.path}" />
        <property name="ieServerPath" value="${webdrone.ie.server.path}" />
        <property name="downloadDirectory" value="${webdrone.download.directory}" />
        <property name="mimeTypes" value="${webdrone.download.mime.types}" />
        <property name="popupRendertime" value="${webdrone.error.popup.render.time}" />
        <property name="elementWaitInSeconds" value="${webdrone.element.action.wait.seconds}" />
        <property name="preferences" ref="browserConfig" />
    </bean>

    <!--                  -->
    <!-- WebDrone         -->
    <!--                  -->
    <bean id="hybridDrone" factory-bean="&amp;hybridWebDroneFactoryBean" factory-method="getObject" scope="prototype" destroy-method="quit" lazy-init="true"/>
    <bean id="customHybridDrone" factory-bean="&amp;hybridWebDroneFactoryBean" factory-method="getDroneWithCustomProfile" scope="prototype" destroy-method="quit" />

    <bean id="shareHybridTestProperties" class="org.alfresco.webdrone.util.ShareTestProperty" lazy-init="true">
        <constructor-arg name="shareUrl" value="${webdrone.hybrid.target}" />
        <constructor-arg name="gridUrl"  value="${webdrone.grid.url}" />
        <constructor-arg name="username" value="${cloud.username}" />
        <constructor-arg name="password" value="${cloud.password}" />
        <constructor-arg name="googleUserName" value="${googleUserName}" />
        <constructor-arg name="googlePassword" value="${googlePassword}" />
        <constructor-arg name="alfrescoVersion" value="${webdrone.alfresco.version}" />
        <constructor-arg name="downloadDirectory" value="${webdrone.download.directory}" />
        <constructor-arg name="hybridEnabled" value="${hybrid.enabled}" />
        <property name="cloudUserName" value="${cloud.username}" />
        <property name="cloudUserPassword" value="${cloud.password}" />
        <property name="popupRendertime" value="${webdrone.page.render.wait.time}" />
    </bean>
</beans>

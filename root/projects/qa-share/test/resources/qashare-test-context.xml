<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mongo="http://www.springframework.org/schema/data/mongo"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/data/mongo
          http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/util 
          http://www.springframework.org/schema/util/spring-util-3.0.xsd">
    
    <!--                                     -->      
    <!-- Import webdrone application context -->      
    <!--                                     -->      
    <import resource="classpath:webdrone-context.xml" />
     <bean id="shareProperties" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:webdrone.properties</value>
                <value>classpath:testData.properties</value>
            </list>
        </property>
    </bean>
    
    <bean id="factoryPage"  class="org.alfresco.po.share.FactorySharePage" />
    
    <bean id="poProperties"  class="org.alfresco.po.share.ShareProperties">
        <constructor-arg name="alfrescoVersion" value="${share.version}" />
    </bean>
    
    <bean id="httpClientProvider" class="org.alfresco.rest.api.tests.client.SharedHttpClientProvider">
         <constructor-arg name="alfrescoUrl" value="${share.target}" />
         <constructor-arg name="maxNumberOfConnections" value="2" />
    </bean>
    
    <bean id="shareTestProperties" class="org.alfresco.share.util.ShareTestProperty">
        <constructor-arg name="shareUrl" value="${share.target}" />
        <constructor-arg name="gridUrl" value="null" />
        <constructor-arg name="username" value="${webdrone.username}" />
        <constructor-arg name="password" value="${webdrone.password}" />
        <constructor-arg name="alfrescoVersion" value="${share.version}" />
        <constructor-arg name="cloudUrlForHybrid" value="${webdrone.cloud.target}" />
        <constructor-arg name="downloadDirectory" value="${webdrone.download.directory}" />
        <constructor-arg name="googleUserName" value="${googleUserName}" />
        <constructor-arg name="googlePassword" value="${googlePassword}" />
        <constructor-arg name="hybridEnabled" value="${webdrone.hybrid.enabled}" />
        <constructor-arg name="uniqueTestRunName" value="${uniqueTestRunName}" />
        <constructor-arg name="domainFree" value="${domainFree}" />
        <constructor-arg name="domainPremium" value="${domainPremium}" />
        <constructor-arg name="domainHybrid" value="${domainHybrid}" />
        <constructor-arg name="defaultUser" value="${defaultUser}" />
        <constructor-arg name="uniqueTestDataString" value="${uniqueTestDataString}" />  
        <constructor-arg name="adminUsername" value="${adminUsername}" />
        <constructor-arg name="adminPassword" value="${adminPassword}" />
        <constructor-arg name="superadminUsername" value="${superadminUsername}" />
        <constructor-arg name="superadminPassword" value="${superadminPassword}" />
        <constructor-arg name="headerKey" value="${headerKey}" />   
        <constructor-arg name="httpSecurePort" value="${webdrone.secure.port}" />
        <constructor-arg name="mimeTypes" value="${webdrone.download.mime.types}" />   
    </bean>
    
    <!--                                     					-->      
    <!-- Share test properties for cloud for hybrid scenario 	-->      
    <!--                                     					-->   
    <bean id="hybridShareTestProperties" class="org.alfresco.share.util.ShareTestProperty">
        <constructor-arg name="shareUrl" value="${webdrone.cloud.target}" />
        <constructor-arg name="gridUrl" value="null" />
        <constructor-arg name="username" value="${webdrone.hybrid.cloud.username}" />
        <constructor-arg name="password" value="${webdrone.hybrid.cloud.password}" />
        <constructor-arg name="alfrescoVersion" value="${webdrone.cloud.version}" />
        <constructor-arg name="cloudUrlForHybrid" value="" />
        <constructor-arg name="downloadDirectory" value="${webdrone.download.directory}" />
        <constructor-arg name="googleUserName" value="${googleUserName}" />
        <constructor-arg name="googlePassword" value="${googlePassword}" />
        <constructor-arg name="hybridEnabled" value="${webdrone.hybrid.enabled}" />
        <constructor-arg name="uniqueTestRunName" value="${uniqueTestRunName}" />
        <constructor-arg name="domainFree" value="${domainFree}" />
        <constructor-arg name="domainPremium" value="${domainPremium}" />
        <constructor-arg name="domainHybrid" value="${domainHybrid}" />
        <constructor-arg name="defaultUser" value="${defaultUser}" />
        <constructor-arg name="uniqueTestDataString" value="${uniqueTestDataString}" />  
        <constructor-arg name="adminUsername" value="${adminUsername}" />
        <constructor-arg name="adminPassword" value="${adminPassword}" />
        <constructor-arg name="superadminUsername" value="${superadminUsername}" />
        <constructor-arg name="superadminPassword" value="${superadminPassword}" />
        <constructor-arg name="headerKey" value="${headerKey}" />  
        <constructor-arg name="httpSecurePort" value="${webdrone.secure.port}" />  
        <constructor-arg name="mimeTypes" value="${webdrone.download.mime.types}" />
    </bean>
     
        <bean id="hybirdProperties"  class="org.alfresco.po.share.ShareProperties">
        <constructor-arg name="alfrescoVersion" value="${webdrone.cloud.version}" />
       </bean>
       
    <util:constant id="englishLocale" static-field="java.util.Locale.ENGLISH" />
    
    <util:constant id="language" static-field="org.alfresco.webdrone.BrowserPreference.Language" />  
       
    <!--                  -->
    <!-- WebDrone Factory -->
    <!--                  -->
    <bean id="hybridWebDroneFactoryBean" class="org.alfresco.webdrone.WebDroneFactory">
        <constructor-arg name="defaultWaitTime" value="${webdrone.element.wait.time}" />
        <constructor-arg name="browser" value="${webdrone.browser}" />
        <constructor-arg name="maxPageRenderWaitTime" value="${webdrone.page.render.wait.time}" />
         <constructor-arg name="factoryPage" ref="factoryPage" />
        <constructor-arg name="properties" ref="hybirdProperties" />
         <constructor-arg name="preferences">
        	<util:map key-type="org.alfresco.webdrone.BrowserPreference" value-type="java.lang.Object">
        		<entry key-ref="language" value-ref="englishLocale" />
			</util:map>
        </constructor-arg>
        <property name="chromeServerPath" value="${webdrone.chrome.server.path}" />
        <property name="ieServerPath" value="${webdrone.ie.server.path}" />
        <property name="downloadDirectory" value="${webdrone.download.directory}" />
        <property name="mimeTypes" value="${webdrone.download.mime.types}" />
        <!--  property name="popupRendertime" value="${webdrone.error.popup.render.time}" />
        <property name="elementWaitInSeconds" value="${webdrone.element.action.wait.seconds}" / -->
    </bean>
    
    <!--                  -->
    <!-- WebDrone for hybrid workflows        -->
    <!--                  -->    
    <bean id="hybridWebDrone" factory-bean="&amp;hybridWebDroneFactoryBean"
	lazy-init="true" factory-method="getObject" scope="prototype"
	destroy-method="quit" />
	
	<util:constant id="downloadFolderList" static-field="org.alfresco.webdrone.BrowserPreference.DownloadFolderList" /> 
	<util:constant id="downloadDirectory" static-field="org.alfresco.webdrone.BrowserPreference.DownloadDirectory" /> 
	<util:constant id="saveToDisk" static-field="org.alfresco.webdrone.BrowserPreference.SaveToDisk" /> 
	
	<!--                  -->
    <!-- WebDrone Factory -->
    <!--                  -->
    <bean id="downloadWebDroneFactoryBean" class="org.alfresco.webdrone.WebDroneFactory">
        <constructor-arg name="defaultWaitTime" value="${webdrone.element.wait.time}" />
        <constructor-arg name="browser" value="${webdrone.browser}" />
        <constructor-arg name="maxPageRenderWaitTime" value="${webdrone.page.render.wait.time}" />
         <constructor-arg name="factoryPage" ref="factoryPage" />
        <constructor-arg name="properties" ref="poProperties" />
         <constructor-arg name="preferences">
        	<util:map key-type="org.alfresco.webdrone.BrowserPreference" value-type="java.lang.Object">
        		<entry key-ref="downloadFolderList" value="2" />
        		<entry key-ref="downloadDirectory" value="${webdrone.download.directory}"  />
        		<entry key-ref="saveToDisk" value="${webdrone.download.mime.types}" />
			</util:map>
        </constructor-arg>
        <property name="chromeServerPath" value="${webdrone.chrome.server.path}" />
        <property name="ieServerPath" value="${webdrone.ie.server.path}" />
        <property name="downloadDirectory" value="${webdrone.download.directory}" />
        <property name="mimeTypes" value="${webdrone.download.mime.types}" />
        <!--  property name="popupRendertime" value="${webdrone.error.popup.render.time}" />
        <property name="elementWaitInSeconds" value="${webdrone.element.action.wait.seconds}" / -->
    </bean>
    
    <!--                  -->
    <!-- WebDrone for hybrid workflows        -->
    <!--                  -->    
    <bean id="downloadWebDrone" factory-bean="&amp;downloadWebDroneFactoryBean"
	lazy-init="true" factory-method="getObject" scope="prototype"
	destroy-method="quit" />
    
</beans>

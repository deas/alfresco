<?xml version='1.0' encoding='UTF-8'?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

   <!--                                     -->
   <!-- Web Framework Services and Registry -->
   <!--                                     -->

   <!-- Abstract Base Services -->
   <bean id="webframework.factory.base" class="org.springframework.extensions.surf.support.BaseFactory" abstract="true">
       <property name="serviceRegistry" ref="webframework.service.registry" />
       <property name="frameworkUtils"  ref="framework.utils"></property>
   </bean>

   <!-- Web Framework Core Services -->

   <!--  The WebFrameworkServiceRegistry allows access to all of the core services through the allocation of
         a single bean. This in some way defeats the object of the Spring Framework as the dependencies should
         be injected directly into the dependent classes.

         As well as just providing a set of access method to other Spring Beans it does also do some initialisation
         of some objects which makes it not a straight-forward exercise to remove it completely.
   -->
   <bean id="webframework.service.registry" class="org.springframework.extensions.surf.WebFrameworkServiceRegistry">
       <property name="configService"               ref="web.config"/>
       <property name="webFrameworkRenderService"   ref="webframework.service.render"/>
       <property name="webFrameworkResourceService" ref="webframework.service.resource"/>
       <property name="connectorService"            ref="connector.service"/>
       <property name="presetsManager"              ref="webframework.presets.manager"/>
       <property name="scriptRemote"                ref="webframework.webscripts.scriptremote"/>
       <property name="templatesContainer"          ref="webframework.templates.container"/>
       <property name="persisterService"            ref="webframework.service.persister"/>
       <property name="objectPersistenceService"    ref="webframework.service.objectpersistence"/>
       <property name="modelObjectService"          ref="webframework.service.modelobject"/>
       <property name="webFrameworkContainer"       ref="webscripts.container"/>
       <property name="remoteConfigElement"         ref="remote.config.element"/>
       <property name="webFrameworkConfigElement"   ref="webframework.config.element"/>
       <property name="userFactory"                 ref="user.factory"/>
       <property name="taglibFactory"               ref="taglib.factory"/>
       <property name="servletContextHashModel"     ref="servletContext.hashModel"/>
   </bean>

   <!--  The ProcessorModelHelper used to be a class that just provided a suite of static helper method that
         relied on the FrameworkUtil static methods. This has now been converted into a Spring Bean to try
         and avoid excessive use of Bean lookup using the application context. It also means that Spring Surf
         becomes more extensible. -->
   <bean id="processor.model.helper" class="org.springframework.extensions.webscripts.ProcessorModelHelper">
       <property name="taglibFactory"               ref="taglib.factory"></property>
       <property name="servletContextHashModel"     ref="servletContext.hashModel"/>
       <property name="webFrameworkConfigElement"   ref="webframework.config.element"/>
       <property name="scriptConfigModelInstance"   ref="script.config.model.instance"/>
       <property name="templateConfigModelInstance" ref="template.config.model.instance"/>
       <property name="webFrameworkRenderService"   ref="webframework.service.render"/>
       <property name="directiveFactory"            ref="directive.factory"/>
       <property name="dependencyAggregator"        ref="dependency.aggregator"/>
   </bean>

   <!-- This factory bean is used to create all the custom FreeMarker directives used in Surf. -->
   <bean id="directive.factory" parent="directive.factory.abstract" class="org.springframework.extensions.directives.DefaultDirectiveFactory"/>
   <bean id="directive.factory.abstract" abstract="true">
      <property name="dependencyHandler"           ref="dependency.handler" />
      <property name="dependencyAggregator"        ref="dependency.aggregator" />
      <property name="webFrameworkConfig"          ref="webframework.config.element"/>
      <property name="messagesWebScript"           ref="webscript.org.springframework.extensions.messages.get" />
      <property name="modelObjectService"          ref="webframework.service.modelobject" />
      <property name="dojoDependencyHandler"       ref="dojo.dependency.handler" />
      <property name="i18nDependencyHandler"       ref="i18n.dependency.handler" />
      <property name="configService"               ref="web.config"/>
      <property name="webScriptsContainer"         ref="webscripts.container" />
   </bean>
   
   <!--  The FrameworkUtil originally just provided static helper methods, many of which were just accessing the
         WebFrameworkServiceRegistry access methods. By instantiating this as a bean we can "cut out the middle man" -->
   <bean id="framework.utils" class="org.springframework.extensions.surf.FrameworkBean">
       <property name="webFrameworkContainer"       ref="webscripts.container"/>
       <property name="remoteConfig"                ref="remote.config.element"/>
       <property name="connectorService"            ref="connector.service"/>
   </bean>

   <!-- A factory service for creating URLHelpers -->
   <bean id="url.helper.factory" class="org.springframework.extensions.webscripts.DefaultURLHelperFactory"/>

   <!--  This factory bean has been introduced to allow us to define the WebFrameworkConfigElement
         and RemoteConfigElement as Spring Beans. Previously these objects were obtained from the
         WebFrameworkServiceRegistry and were instantiated during its onBootStrap method. The
         function from that method has been moved out to factory methods in the factory bean. This
         means that the WebFrameworkConfigElement and RemoteConfigElement can be injected into
         dependent beans as dependencies. -->
   <bean id="config.factory.bean" class="org.springframework.extensions.config.ConfigBeanFactory">
       <property name="configService" ref="web.config"/>
   </bean>

   <!-- The RemoteConfigElement was previously only available from the WebFrameworkServiceRegistry
        but is now available as a Spring Bean via the ConfigBeanFactory. -->
   <bean id="remote.config.element"
         factory-bean="config.factory.bean"
         factory-method="getRemoteConfig"/>

   <!-- The WebFrameworkConfigElement was previously only available from the WebFrameworkServiceRegistry
        but is now available as a Spring Bean via the ConfigBeanFactory. -->
   <bean id="webframework.config.element"
         factory-bean="config.factory.bean"
         factory-method="getWebFrameworkConfig"/>

   <!--  The UserFactory was previously only available from the WebFrameworkServiceRegistry but is now
         available as a Spring Bean via the ConfigBeanFactory -->
   <bean id="user.factory"
         factory-bean="config.factory.bean"
         factory-method="getUserFactory"/>

   <!--  The TagLibFactory was previously only available from the WebFrameworkServiceRegistry but is now
         available as a Spring Bean via the ConfigBeanFactory -->
   <bean id="taglib.factory"
         factory-bean="config.factory.bean"
         factory-method="getTabLibFactory"/>

   <!-- The ServletContextHashModel was previously only available from the WebFrameworkServiceRegistry
        but is now available as a Spring Bean via the ConfigBeanFactory. -->
   <bean id="servletContext.hashModel"
         factory-bean="config.factory.bean"
         factory-method="getServletContextHashModel"/>

   <!--  An instance of ScriptConfigModel (instantiated using the ConfigService "web.config") was previously
         created as a static field in the ProcessorModelHelper. It is now provided as a Spring Bean via the
         ConfigBeanFactory allowing the ProcessorModelHelpler itself to be instantiated as a Spring Bean -->
   <bean id="script.config.model.instance"
         factory-bean="config.factory.bean"
         factory-method="getScriptConfigModel"/>

   <!--  An instance of TemplateConfigModel (instantiated using the ConfigService "web.config") was previously
         created as a static field in the ProcessorModelHelper. It is now provided as a Spring Bean via the
         ConfigBeanFactory allowing the ProcessorModelHelpler itself to be instantiated as a Spring Bean -->
   <bean id="template.config.model.instance"
         factory-bean="config.factory.bean"
         factory-method="getTemplateConfigModel"/>

   <bean id="webframework.service.resource" class="org.springframework.extensions.surf.resource.ResourceService">
       <property name="serviceRegistry" ref="webframework.service.registry" />
   </bean>

   <bean id="webframework.service.render" class="org.springframework.extensions.surf.render.RenderService">
       <property name="modelObjectService"        ref="webframework.service.modelobject"/>
       <property name="webFrameworkConfiguration" ref="webframework.config.element" />
       <property name="pageRenderer"              ref="webframework.renderer.page" />
       <property name="templateRenderer"          ref="webframework.renderer.template" />
       <property name="regionRenderer"            ref="webframework.renderer.region" />
       <property name="componentRenderer"         ref="webframework.renderer.component" />
       <property name="chromeRenderer"            ref="webframework.renderer.chrome" />
       <property name="linkBuilderFactory"        ref="webframework.factory.linkbuilder.servlet"/>
   </bean>

   <bean id="webframework.service.persister" class="org.springframework.extensions.surf.persister.PersisterService" init-method="init">
       <property name="webFrameworkConfig" ref="webframework.config.element" />
       <property name="autowireService"    ref="webframework.service.autowire"/>       
       <property name="persisters">
           <list>
               <!-- The default persister added to the default persister service. This is done to 
                    satisfy the legacy requirement of the Alresco Share which would define the
                    same persister through the default Spring Surf object type configuration. -->
               <ref bean="webframework.objects.persister"/>
           </list>
       </property>
   </bean>

   <bean id="webframework.service.objectpersistence" class="org.springframework.extensions.surf.ObjectPersistenceService">
       <property name="persisterService" ref="webframework.service.persister" />       
   </bean>

   <bean id="webframework.service.modelobject" class="org.springframework.extensions.surf.ModelObjectService">
       <property name="objectPersistenceService" ref="webframework.service.objectpersistence" />
   </bean>

    <!--  This is the concrete instance of the Spring Surf default autowire service. The reason why it extends
          an abstract bean definition is so that consuming applications can register the same bean id to override
          this definition, but still take advantage of extending the abstract definition to only override certain
          properties (otherwise it would be necessary to copy and paste the entire definition in order to change
          a single property). If custom auto wiring is required then this bean definition MUST be overridden. If
          no autowiring is required then simply do not include the <autowire> element (or its <mode> and <runtime>
          child elements) in the applications Spring Surf configuration. -->
    <bean id="webframework.service.autowire" parent="webframework.service.autowire.abstract" />
	
    <!--  The Spring Surf autowire service overrides the definitions in the default "spring-surf-model-context.xml"
          configuration file to construct established WebScript & FreeMarker template search paths and persistence
          services. Autowiring is controlled through the Spring Surf configuration file by the <autowire>, <mode>
          and <runtime> elements. To disable the autowire service simply remove these elements from your configuration.
          
          The following definition provides an abstract default configuration that can be overridden (if required)
          to add or remove Stores and Persisters from the default modes and runtimes. It is also possible to extend
          the existing AutowireService class to define new modes and runtimes.
          
          The modes configure the WebScripts and FreeMarker template processors. 
          
          The runtimes configure a search path for WebScripts, a search path for FreeMarker template files
          and the set of persisters to be controlled by a MultiObjectPersister. There are a set of common stores
          and persisters for all runtimes, and then sets of specific stores and persisters to add for each runtime.   
     -->
    <bean id="webframework.service.autowire.abstract" abstract="true" class="org.springframework.extensions.surf.AutowireService">
	    <property name="webScriptsSearchPath"        ref="webframework.webscripts.searchpath" />
	    <property name="templatesSearchPath"         ref="webframework.templates.searchpath" />		
	    <property name="webscriptsTemplateProcessor" ref="webframework.webscripts.templateprocessor.freemarker" />
	    <property name="webscriptsScriptProcessor"   ref="webframework.webscripts.scriptprocessor.javascript"/>
	    <property name="templatesTemplateProcessor"  ref="webframework.templates.templateprocessor.freemarker"/>
	    <property name="templatesScriptProcessor"    ref="webframework.templates.scriptprocessor.javascript"/>
	    <property name="commonWebScriptPaths">
            <list>
                <ref bean="webframework.webscripts.store.classpath"></ref>
                <ref bean="webscripts.store.alfresco"></ref>
                <ref bean="webscripts.store"></ref>
            </list>
        </property>
	    <property name="alfrescoWebScriptPaths">
            <list>
                <ref bean="webframework.webscripts.store.alfresco.custom"></ref>
                <ref bean="webframework.webscripts.store.alfresco.classpath"></ref>
            </list>
        </property>
	    <property name="webInfWebScriptPaths">
            <list>
                <ref bean="webframework.webscripts.store.webinf"></ref>
            </list>
        </property>
	    <property name="localWebScriptPaths">
            <list>
                <ref bean="webframework.webscripts.store.local"></ref>
            </list>
        </property>
        <property name="commonTemplatePaths">
            <list>
		        <ref bean="webframework.templates.store.classpath"></ref>
		        <ref bean="webframework.webscripts.store.classpath"></ref>
            </list>
        </property>
	    <property name="alfrescoTemplatePaths">
            <list>
                <ref bean="webframework.templates.store.alfresco.custom"></ref>
		        <ref bean="webframework.webscripts.store.alfresco.custom"></ref>
		        <ref bean="webframework.templates.store.alfresco.classpath"></ref>
		        <ref bean="webframework.webscripts.store.alfresco.classpath"></ref>
            </list>
        </property>
	    <property name="webInfTemplatePaths">
            <list>
                <ref bean="webframework.templates.store.webinf"></ref>
                <ref bean="webframework.webscripts.store.webinf"></ref>
            </list>
        </property>
	    <property name="localTemplatePaths">
            <list>
                <ref bean="webframework.templates.store.local"></ref>
                <ref bean="webframework.webscripts.store.local"></ref>
            </list>
        </property>
        <property name="commonPersisterPaths">
            <list>
	            <ref bean="webframework.sitedata.persister.classpath"></ref>
            </list>
        </property>
	    <property name="alfrescoPersisterPaths">
            <list>
        	    <ref bean="webframework.sitedata.persister.classpath.alfresco-custom"></ref>
  	            <ref bean="webframework.sitedata.persister.alfresco-classpath"></ref>
            </list>
        </property>
	    <property name="webInfPersisterPaths">
            <list>
                <ref bean="webframework.webinf.persister.root"></ref>
            </list>
        </property>
	    <property name="localPersisterPaths">
            <list>
                <ref bean="webframework.webinf.persister.local"></ref>
            </list>
        </property>
    </bean>

   <!-- Web Framework Resource Loader Factories -->
   <bean id="webframework.factory.resource.loader.url" class="org.springframework.extensions.surf.resource.support.URLResourceLoaderFactory">
      <property name="cacheTimeout" value="0" />
      <property name="order" value="0" />
   </bean>
   <bean id="webframework.factory.resource.loader.cmis" class="org.springframework.extensions.surf.resource.support.CMISResourceLoaderFactory">
      <property name="cacheTimeout" value="0" />
      <property name="order" value="1" />
   </bean>
   <bean id="webframework.factory.resource.loader.alfresco" class="org.springframework.extensions.surf.resource.support.AlfrescoResourceLoaderFactory">
      <property name="cacheTimeout" value="0" />
      <property name="order" value="2" />
   </bean>

   <!-- Web Framework Extensible Factories -->
   <!-- NOTE: these bean IDs are referenced in code (however, they shouldn't be !!!) -->
   <bean id="webframework.factory.requestcontext.servlet" class="org.springframework.extensions.surf.support.ServletRequestContextFactory" parent="webframework.factory.base">
       <property name="linkBuilderFactory"         ref="webframework.factory.linkbuilder.servlet"></property>
       <property name="extensibilityModuleHandler" ref="webscripts.extensibility.handler"/>
       <property name="dependencyHandler"          ref="dependency.handler" />
       <property name="webFrameworkConfigElement"  ref="webframework.config.element"/>
       <property name="configService"              ref="web.config"/>
   </bean>

   <!-- This is an abstract LinkBuilderFactory bean that sets the default properties required for instantiating AbstractLinkBuilders.
        It should be set as the parent of any bean using a subclass of AbstractLinkBuilderFactory. -->
   <bean id="webframework.factory.linkbuilder" abstract="true" parent="webframework.factory.base" class="org.springframework.extensions.surf.support.AbstractLinkBuilderFactory">
       <property name="resourceService"           ref="webframework.service.resource"/>
       <property name="modelObjectService"        ref="webframework.service.modelobject"/>
       <property name="webFrameworkConfigElement" ref="webframework.config.element"></property>
   </bean>

   <bean id="webframework.factory.linkbuilder.requestparameter" class="org.springframework.extensions.surf.support.RequestParameterLinkBuilderFactory" parent="webframework.factory.linkbuilder" />

   <!--  This ServletLinkBuilderFactory bean is used injected into the ServletRequestContextFactory bean
         (id: "webframework.factory.requestcontext.servlet") and is used to create a new ServletLinkBuilder
         into each instance of ServletRequestContext that the factory creates. -->
   <bean id="webframework.factory.linkbuilder.servlet" class="org.springframework.extensions.surf.support.ServletLinkBuilderFactory" parent="webframework.factory.linkbuilder">
       <property name="pageUri" value="/" />
       <property name="pageTypeUri" value="/pt/" />
   </bean>

   <bean id="webframework.factory.user.default" class="org.springframework.extensions.surf.support.DefaultUserFactory" parent="webframework.factory.base" />
   <bean id="webframework.factory.user.alfresco" class="org.springframework.extensions.surf.support.AlfrescoUserFactory" parent="webframework.factory.base" />
   <bean id="webframework.factory.user.alfresco32" class="org.springframework.extensions.surf.support.Alfresco32UserFactory" parent="webframework.factory.base" />

   <!-- The following beans define the handler, search path and store for retrieving remote resources for Surf
        to make use of. This allow the Surf application to obtain and use resources that are not part of the local
        web application but will be treated as though they are. -->
   <bean id="remote.resources.store" parent="webframework.store.remote.abstract">
      <property name="path"><value></value></property>
      <property name="api">
         <value>/remote/share/resource</value>
      </property>
   </bean>
   
   <bean id="remote.resources.searchpath" class="org.springframework.extensions.webscripts.SearchPath">
      <property name="searchPath">
         <list>
            <ref bean="remote.resources.store" />
         </list>
      </property>
   </bean>
   <bean id="remote.resources.handler" parent="remote.resources.handler.abstract" class="org.springframework.extensions.surf.RemoteResourcesHandler"/>
   <bean id="remote.resources.handler.abstract" abstract="true">
      <property name="searchPath" ref="remote.resources.searchpath"/>
      <property name="filters">
         <list>
            <!-- Enter valid filters here -->
         </list>
      </property>
   </bean>

   <!--  The dependency handler is used to manage resources (such as JavaScript and CSS files) and works with the ResourceController
         to ensure that pages use resource request URLs that include a checksum so that browsers are not able to use stale cached
         data. The charset used for the resources can be changed as can the digest that is used to generate the checksum. It also
         handles debug mode (when files should NOT be minified) as well as production mode (when they should) and attempts to
         compensate for the various different suffices that can be added to resource files to indicate the file type.
   -->
   <bean id="dependency.handler" parent="dependency.handler.abstract" class="org.springframework.extensions.surf.DependencyHandler"/>
   <bean id="dependency.handler.abstract" abstract="true">
       <property name="charset" value="UTF-8"/>
       <property name="digest" value="MD5"/>
       <property name="debugSuffices">
           <list>
               <value>.js.uncompressed</value>  <!--  This suffix is used for Dojo source files -->
               <value></value>                  <!--  The debug resource is the same as requested -->
               <value>_src</value>              <!--  This suffix is used for the Tiny MCE JavaScript files -->
               <value>-debug</value>            <!--  This suffix is used for YUI JavaScript files -->
           </list>
       </property>
       <property name="productionSuffices">
           <list>
               <value>-min</value>      <!-- This is the suffix used for Alfresco minified files -->
               <value>-minified</value> <!--  This is also used -->
               <value></value>          <!-- If all else fails, look up the name of the file as requested -->
           </list>
       </property>
       <property name="remoteResourcesHandler"    ref="remote.resources.handler"/>
       <property name="scriptConfigModel"         ref="script.config.model.instance"/>
       <property name="cssDataImageHandler"       ref="css.data.image.handler"/>
       <property name="webFrameworkConfigElement" ref="webframework.config.element"/>
       <property name="resourceControllerMapping" value="/res" />
   </bean>
   
   <!-- The CSS data image handler is used to convert URLs in CSS files into Base64 encoded Strings. This should be done to
        improve performance by reducing the number of HTTP requests that the browser needs to make. This will only be applied
        when both <use-checksum-dependencies> and <generate-css-data-images> are set to "true" in the Surf application 
        configuration. -->
   <bean id="css.data.image.handler" parent="css.data.image.handler.abstract" class="org.springframework.extensions.surf.CssImageDataHandler"/>
   <bean id="css.data.image.handler.abstract" abstract="true">
       <property name="dependencyHandler" ref="dependency.handler" />
       <property name="maximumImageSize" value="10485760" />
       <property name="excludeMimeTypes">
          <list>
             <value>css</value>
             <value>woff</value>
             <value>eot</value>
             <value>ttf</value>
          </list>
       </property>
       <property name="excludeCssPaths">
          <list>
             <!-- Add paths to be excluded in overrides -->
          </list>
       </property>
   </bean>
   
   <!--  This is the definition for a pure LESS CSS theme handler. This can be used to replace the uncommented "css.theme.handler" bean
         when a pure LESS approach is required for CSS theme processing. -->
   <!-- <bean id="css.theme.handler" parent="css.theme.handler.abstract" class="org.springframework.extensions.surf.LessForJavaCssThemeHandler"/> -->
   
   <!--  This is the definition for a hybrid of simple tokenization and LESS theme handling. This can be used to replace the uncommented
         "css.theme.handler" bean when a combination of simple tokenization and LESS is required for CSS theme processing. This bean should be
         used when using widgets that use both approaches, but ideally should only be required during migration from one approach to the other.
         Ideally the pure LESS theme handler should be used. -->
   <bean id="css.theme.handler" parent="css.theme.handler.abstract" class="org.springframework.extensions.surf.HybridCssThemeHandler"/>
    
   <!-- The CSS theme handler is used to detect and substitute tokens in CSS valules to allow common
        source file to be customized by theme specific variables -->
   <!-- <bean id="css.theme.handler" parent="css.theme.handler.abstract" class="org.springframework.extensions.surf.CssThemeHandler"/> -->
   <bean id="css.theme.handler.abstract" abstract="true">
      <property name="tokenRegex" value="(\$([^;\s\{\}]*))"/>
      <property name="targetGroup" value="2"/>  <!-- This is the group within the regex pattern that identifies the token name -->
   </bean>
   
   <!-- The depenendency aggregator is used to combine multiple dependency files into a single resource that is cached
        on the server for the duration of its lifecycle. As well as aggregating files it also compresses them using
        the YUI Compressor classes. -->
   <bean id="dependency.aggregator" parent="dependency.aggregator.abstract" class="org.springframework.extensions.surf.DependencyAggregator"/>
   <bean id="dependency.aggregator.abstract" abstract="true">
       <!--  YUI Compressor Settings -->
       <property name="charset"               value="UTF-8"/>
       <property name="linebreak"             value="-1"/>
       <property name="munge"                 value="true"/>
       <property name="verbose"               value="false"/>
       <property name="preserveAllSemiColons" value="false"/>
       <property name="disableOptimizations"  value="false"/>
       
       <!--  Bean references -->
       <property name="scriptConfigModel"   ref="script.config.model.instance"/>
       <property name="dependencyHandler"   ref="dependency.handler" />
       <property name="cssImageDataHandler" ref="css.data.image.handler"/>
       <property name="cssThemeHandler"     ref="css.theme.handler"/>
       
       <!--  There are certain paths that we *know* will not be found and that we don't
             want to generate error message for -->
       <property name="missingFileWarningSuppressionList">
          <list>
             <value>js/alfresco/dummy/module.js</value>
          </list>
       </property>
       
       <!-- size of file set to MD5 checksum cache in entries -->
       <property name="cacheSize" value="10240"/>
       
   </bean>
   
   <!-- This handles all Dojo related resource processing when Dojo support is enabled -->
   <bean id="dojo.dependency.handler" parent="dojo.dependency.handler.abstract" class="org.springframework.extensions.surf.DojoDependencyHandler"/>
   <bean id="dojo.dependency.handler.abstract" abstract="true">
      <property name="dependencyHandler"         ref="dependency.handler" />
      <property name="dependencyAggregator"      ref="dependency.aggregator" />
      <property name="webFrameworkConfigElement" ref="webframework.config.element"/>
      <property name="dependencyRules">
         <list>
            <ref bean="define.dojo.js.dependency.rule"/>
            <ref bean="define.dojo.css.dependency.rule"/>
            <ref bean="define.dojo.widgets.dependency.rule"/>
            <ref bean="define.dojo.i18n.dependency.rule"/>
            <ref bean="define.dojo.non.amd.dependency.rule"/>
         </list>
      </property>
   </bean>
   
   <!-- This handles processing and caching of JSON strings for i18n dependencies -->
   <bean id="i18n.dependency.handler" parent="i18n.dependency.handler.abstract" class="org.springframework.extensions.surf.I18nDependencyHandler"/>
   <bean id="i18n.dependency.handler.abstract" abstract="true">
      <property name="dependencyHandler"         ref="dependency.handler" />
      <property name="webFrameworkConfigElement" ref="webframework.config.element"/>
   </bean>
   
   <!-- This rule looks for standard Dojo "define" statements that specify the Dojo files that are required by the source file. -->
   <bean id="define.dojo.js.dependency.rule" parent="define.dojo.js.dependency.rule.abstract" class="org.springframework.extensions.surf.DojoDependencyRule"/>
   <bean id="define.dojo.js.dependency.rule.abstract" abstract="true">
      <property name="dependencyHandler"     ref="dependency.handler" />
      <property name="dojoDependencyHandler" ref="dojo.dependency.handler" />
      <property name="declarationRegex"      value="(define[\r\s\t\n]*\(([\r\s\t\n]*&quot;.*?&quot;[\r\s\t\n]*,[\r\s\t\n]*)??\[)[\r\s\t\n]*(((&quot;.*?&quot;)[\r\s\t\n]*,[\r\s\t\n]*)*?&quot;.*?&quot;)??[\r\s\t\n]*(\])"/>
      <property name="dependencyRegex"       value="([\s\t\n]*&quot;.*?&quot;[\s\t\n]*)*"/>
      <property name="targetGroup"           value="3"/>
   </bean>
   
   <!-- This rule looks for CSS dependency declarations placed within the source JavaScript file. CSS dependencies should be made using the following
        syntax: 
           cssRequirements: [{cssFile:"<relative path>",mediaType:"<media type>"}],
          
        PLEASE NOTE: It is essential that paths are defined as a single String - variable concatonation will not work as the variables
                     cannot be processed. All paths specified should be relative to the source of the JavaScript file. 
         -->
   <bean id="define.dojo.css.dependency.rule" parent="define.dojo.css.dependency.rule.abstract" class="org.springframework.extensions.surf.DojoCssDependencyRule"/>
   <bean id="define.dojo.css.dependency.rule.abstract" abstract="true">
      <property name="dependencyHandler"     ref="dependency.handler" />
      <property name="dojoDependencyHandler" ref="dojo.dependency.handler" />
      <property name="declarationRegex"      value="(cssRequirements:\[\{(.*)\}\])"/>
      <property name="dependencyRegex"       value="cssFile:&quot;(.*?)&quot;(,mediaType:&quot;(.*?)&quot;)?"/>
      <property name="targetGroup"           value="2"/>
   </bean>
   
   <!-- This rule looks for i18n dependency files. These dependencies will be treated as ResourceBundle properties
        files and used to generate a JavaScript object containing the properties. The JavaScript objects will be
        assigned to the global JavaScript object defined by the "messages-object" configuration value. Messages 
        objects will be scoped accoreding to the name of the widget if provided and to the defined defaultI18nScope
        value if not. -->
   <bean id="define.dojo.i18n.dependency.rule" parent="define.dojo.i18n.dependency.rule.abstract" class="org.springframework.extensions.surf.DojoI18nDependencyRule"/>
   <bean id="define.dojo.i18n.dependency.rule.abstract" abstract="true">
      <property name="dependencyHandler"         ref="dependency.handler" />
      <property name="dojoDependencyHandler"     ref="dojo.dependency.handler" />
      <property name="webFrameworkConfigElement" ref="webframework.config.element"/>
      <property name="declarationRegex"          value="(i18nRequirements:\[\{(.*)\}\])"/>
      <property name="dependencyRegex"           value="i18nFile:&quot;(.*?)&quot;"/>
      <property name="targetGroup"               value="2"/>
      <property name="widgetNamePatternString"   value="i18nScope:&quot;(.*?)&quot;"/>
      <property name="widgetNameTargetGroup"     value="1"/>
   </bean>
   
   <!-- This rule looks for specific widget declarations within JavaScript files. It looks for arrays of objects
        where the name of the array begins with "widgets". Any nested arrays within this result will also be processed.
        The actual dependencies requested will be the values for attributes called "name".  -->
   <bean id="define.dojo.widgets.dependency.rule" parent="define.dojo.widgets.dependency.rule.abstract" class="org.springframework.extensions.surf.DojoWidgetsDependencyRule"/>
   <bean id="define.dojo.widgets.dependency.rule.abstract" abstract="true">
      <property name="dependencyHandler"     ref="dependency.handler" />
      <property name="dojoDependencyHandler" ref="dojo.dependency.handler" />
      <property name="declarationRegex"      value="&quot;?widgets&quot;?[^:]*?:[\r\s\t\n]*\[(\{(.*)\})\]"/>
      <property name="dependencyRegex"       value="&quot;?name&quot;?:[\r\s\t\n]*&quot;(.*?)&quot;"/>
      <property name="targetGroup"           value="1"/>
   </bean>
   
   <!-- This rule looks for specific widget declarations within JavaScript files. It looks for arrays of objects
        where the name of the array begins with "nonAmdDependencies". Any nested arrays within this result will also be processed.-->
   <bean id="define.dojo.non.amd.dependency.rule" parent="define.dojo.non.amd.dependency.rule.abstract" class="org.springframework.extensions.surf.DojoNonAmdDependencyRule"/>
   <bean id="define.dojo.non.amd.dependency.rule.abstract" abstract="true">
      <property name="dependencyHandler"     ref="dependency.handler" />
      <property name="dojoDependencyHandler" ref="dojo.dependency.handler" />
      <property name="declarationRegex"      value="nonAmdDependencies:\[(.*?)\]"/>
      <property name="dependencyRegex"       value="&quot;(.*?)&quot;"/>
      <property name="targetGroup"           value="1"/>
   </bean>
   
   <!-- This bean backs the clear dependency cache WebScript so that dependency caches can be cleared from a running system -->
   <bean id="webscript.caching.clearDependencies.post" class="org.springframework.extensions.surf.webscripts.ClearDependencyCaches" parent="webscript" scope="prototype">
      <property name="dependencyHandler"     ref="dependency.handler" />
      <property name="dependencyAggregator"  ref="dependency.aggregator" />
      <property name="dojoDependencyHandler" ref="dojo.dependency.handler" />
      <property name="i18nDependencyHandler" ref="i18n.dependency.handler" />
   </bean>
   
   <!-- This bean builds aggregated CSS and JavaScript resources for the requested dependencies -->
   <bean id="webscript.resources.xhr-dependencies.get" class="org.springframework.extensions.surf.webscripts.XhrDependencies" parent="webscript" scope="prototype">
      <property name="dependencyAggregator"  ref="dependency.aggregator" />
   </bean>
   
   <!--  This bean builds aggregated resources from an AMD request -->
   <bean id="webscript.dojo.dojo-xhr-dependencies.post" class="org.springframework.extensions.surf.webscripts.XHRDojoDependencies" parent="webscript" scope="prototype">
      <property name="dependencyHandler"     ref="dependency.handler" />
      <property name="dependencyAggregator"  ref="dependency.aggregator" />
      <property name="dojoDependencyHandler" ref="dojo.dependency.handler" />
      <property name="i18nDependencyHandler" ref="i18n.dependency.handler"/>
      <property name="webFrameworkConfig"    ref="webframework.config.element"/>
   </bean>
   
</beans>
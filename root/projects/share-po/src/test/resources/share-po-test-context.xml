<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mongo="http://www.springframework.org/schema/data/mongo"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/data/mongo
          http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/util
          http://www.springframework.org/schema/util/spring-util-3.0.xsd">

   <import resource="classpath:share-po-context.xml"/>
   <import resource="classpath*:*-testContext.xml"/>
   <bean id="shareProperties" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer" >
      <property name="locations">
         <list>
            <value>classpath:sharepo.properties</value>
            <value>classpath:sharepo.hybrid.properties</value>
            <value>classpath:test.properties</value>
            <value>classpath:module.properties</value>
            <value>classpath:custom.properties</value>
         </list>
      </property>
      <property name="ignoreUnresolvablePlaceholders" value="true"/>
      <property name="ignoreResourceNotFound" value="true" />
   </bean>

    <bean id="poProperties"  class="org.alfresco.po.share.ShareProperties">
        <constructor-arg name="alfrescoVersion" value="${share.version}" />
    </bean>
    
    <bean id="hybridProperties"  class="org.alfresco.po.share.ShareProperties">
        <constructor-arg name="alfrescoVersion" value="${share.hybrid.version}" />
    </bean>

    <bean id="sharePage" abstract="true" class="org.alfresco.po.share.SharePage">
        <property name="alfrescoVersion" value="${share.version}"/>
        <property name="popupRendertime" value="${webdrone.error.popup.render.time}" />
        <property name="elementWaitInSeconds" value="${webdrone.element.action.wait.seconds}" />
    </bean>

    <bean id="shareTestProperties" class="org.alfresco.po.share.util.ShareTestProperty">
        <constructor-arg name="shareUrl" value="${share.target}" />
        <constructor-arg name="gridUrl" value="${webdrone.grid.url}" />
        <constructor-arg name="username" value="${test.username}" />
        <constructor-arg name="password" value="${test.password}" />
        <constructor-arg name="googleUserName" value="${googleUserName}" />
        <constructor-arg name="googlePassword" value="${googlePassword}" />
        <constructor-arg name="alfrescoVersion" value="${share.version}" />
        <constructor-arg name="downloadDirectory" value="${download.directory}" />
        <constructor-arg name="hybridEnabled" value="${hrbrid.enabled}" />
        <constructor-arg name="licenseShare" value="${share.license}" />
        <property name="cloudUserName" value="${test.hybrid.username}" />
        <property name="cloudUserPassword" value="${test.hybrid.password}" />
        <property name="blogUrl" value="${blog.url}" />
        <property name="blogUsername" value="${blog.username}" />
        <property name="blogPassword" value="${blog.password}" />
        <property name="pentahoUserConsoleUrl" value="${pentaho.user.console.target}" />
    </bean>

    <!-- Initiating another user that will be required for unit tests.  -->
    <bean id="anotherUser" class="org.alfresco.po.share.site.document.UserProfile">
        <property name="fName" value="${test.user1.fName}" />
        <property name="lName"  value="${test.user1.lName}" />
        <property name="username" value="${test.user1.username}" />
        <property name="password" value="${test.user1.password}" />
        <property name="emailId" value="${test.user1.emailId}" />
    </bean>

    <bean id="shareHybridTestProperties" class="org.alfresco.po.share.util.ShareTestProperty" lazy-init="true">
        <constructor-arg name="shareUrl" value="${share.hybrid.target}" />
        <constructor-arg name="gridUrl" value="${webdrone.grid.url}" />
        <constructor-arg name="username" value="${test.hybrid.username}" />
        <constructor-arg name="password" value="${test.hybrid.password}" />
        <constructor-arg name="googleUserName" value="${googleUserName}" />
        <constructor-arg name="googlePassword" value="${googlePassword}" />
        <constructor-arg name="alfrescoVersion" value="${share.hybrid.version}" />
        <constructor-arg name="downloadDirectory" value="${download.hybrid.directory}" />
        <constructor-arg name="licenseShare" value="${share.license}" />
        <constructor-arg name="hybridEnabled" value="${hrbrid.enabled}" />
        <property name="blogUrl" value="${blog.url}" />
        <property name="blogUsername" value="${blog.username}" />
        <property name="blogPassword" value="${blog.password}" />
    </bean>

    <bean id="hybridWebDroneFactoryBean" class="org.alfresco.webdrone.WebDroneFactory" lazy-init="true">
        <constructor-arg name="defaultWaitTime" value="${webdrone.hybrid.element.wait.time}" />
        <constructor-arg name="maxPageRenderWaitTime" value="${webdrone.hybrid.page.render.wait.time}" />
        <constructor-arg name="browser" value="${webdrone.hybrid.browser}" />
        <constructor-arg name="properties" ref="hybridProperties" />
        <constructor-arg name="factoryPage" ref="factoryPage" />
        <constructor-arg name="preferences">
            <util:map key-type="org.alfresco.webdrone.BrowserPreference" value-type="java.lang.Object">
                <entry key-ref="language" value-ref="englishLocale" />
            </util:map>
        </constructor-arg>
        <property name="gridUrl" value="${webdrone.grid.url}" />
        <property name="chromeServerPath" value="${webdrone.chrome.server.path}" />
        <property name="ieServerPath" value="${webdrone.ie.server.path}" />
        <property name="downloadDirectory" value="${webdrone.page.render.wait.time}"/>
        <property name="mimeTypes" value="${webdrone.download.mime.types}" />
    </bean>

    <bean id="hybridDrone" factory-bean="&amp;hybridWebDroneFactoryBean" factory-method="getObject" scope="prototype" destroy-method="quit" lazy-init="true"/>

</beans>